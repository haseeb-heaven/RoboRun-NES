;
; File generated by cc65 v 2.19 - N/A
;
	.fopt		compiler,"cc65 v 2.19 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_unrle
	.import		_memcpy
	.import		_delay
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.import		_get_frame_count
	.import		_check_collision
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update_nmi
	.import		_color_emphasis
	.export		_xText
	.export		_yText
	.export		_ppu_region
	.export		_fade_index
	.import		_vsprintf
	.import		_strlen
	.export		_gpit
	.export		_rda
	.export		_update_index
	.export		_gp_addr
	.export		__update_nt_text
	.export		_nes_load_title
	.export		_nes_load_title_a
	.export		_nes_load_title_b
	.export		_nes_hud_update
	.export		_nes_fade_transition_fg
	.export		_nes_fade_transition_bg
	.export		_nes_show_region_error
	.export		_nes_exit_cleanup
	.export		_nes_fade_out
	.export		_nes_fade_in
	.export		_nes_palette_rand
	.export		_nes_text_hud
	.export		_nes_clear_nametable
	.export		__print_nt_text
	.export		_metatiles_bg
	.export		_enemy_spr_0_data
	.export		_enemy_spr_1_data
	.export		_enemy_spr_2_data
	.export		_enemy_spr_3_data
	.export		_enemy_spr_4_data
	.export		_enemy_spr_5_data
	.export		_enemy_spr_6_data
	.export		_enemy_spr_7_data
	.export		_enemy_spr_8_data
	.export		_enemy_spr_9_data
	.export		_enemy_spr_10_data
	.export		_enemy_spr_11_data
	.export		_enemy_spr_list
	.export		_player_robo_spr_0_data
	.export		_player_robo_spr_1_data
	.export		_player_robo_spr_2_data
	.export		_player_robo_spr_3_data
	.export		_player_robo_spr_4_data
	.export		_player_robo_spr_5_data
	.export		_player_robo_spr_6_data
	.export		_player_robo_spr_7_data
	.export		_player_robo_spr_8_data
	.export		_player_robo_spr_9_data
	.export		_player_robo_spr_10_data
	.export		_player_robo_spr_11_data
	.export		_player_robo_spr_12_data
	.export		_player_robo_spr_13_data
	.export		_player_robo_spr_14_data
	.export		_player_robo_spr_15_data
	.export		_player_robo_spr_16_data
	.export		_player_robo_spr_17_data
	.export		_player_robo_spr_18_data
	.export		_player_robo_spr_19_data
	.export		_player_robo_spr_list
	.export		_collectables_spr_0_data
	.export		_collectables_spr_1_data
	.export		_collectables_spr_2_data
	.export		_collectables_spr_3_data
	.export		_collectables_spr_4_data
	.export		_collectables_spr_5_data
	.export		_collectables_spr_6_data
	.export		_collectables_spr_list
	.export		_game_title
	.export		_level_clear_title
	.export		_game_over_title
	.export		_level1_0
	.export		_level1_list
	.export		_level2_0
	.export		_level2_list
	.export		_level3_0
	.export		_level3_list
	.export		_level4_0
	.export		_level4_list
	.export		_level5_0
	.export		_level5_list
	.export		_level_list
	.export		_game_help_title
	.export		_enemy_direction
	.export		_old_enemy_direction
	.export		_palette_spr
	.export		_palette_title
	.export		_palette_bg1
	.export		_palette_bg2
	.export		_palette_bg3
	.export		_index
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_object_L
	.export		_object_R
	.export		_object_U
	.export		_object_D
	.export		_map_coords
	.export		_p_maps
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_map
	.export		_lowX
	.export		_highX
	.export		_lowY
	.export		_temp4
	.export		_L_R_switch
	.export		_enemy_index
	.export		_collectable_index
	.export		_old_x
	.export		_upperLeft
	.export		_up_l_back
	.export		_score
	.export		_old_score
	.export		_total_score
	.export		_scroll_x
	.export		_scroll_y
	.export		_lives
	.export		_stars
	.export		_game_level
	.export		_coins
	.export		_total_coins
	.export		_max_coins
	.export		_max_stars
	.export		_max_lives
	.export		_old_lives
	.export		_old_stars
	.export		_old_level
	.export		_old_coins
	.export		_player_anim
	.export		_enemy_item_count
	.export		_collectables_item_count
	.export		_blink_life
	.export		_blink_cycle
	.export		_menu_select
	.export		_life_timer
	.export		_star_timer
	.export		_half_dead_state
	.export		_invincible_state
	.export		_hit_dead
	.export		_level_offset
	.export		_game_mode
	.export		_player_vel_state
	.export		_is_solid
	.export		_c_map
	.export		_genericBase1
	.export		_genericBase2
	.export		_playerRobo
	.export		_enemy_list
	.export		_collectable_list
	.export		_bg_collision
	.export		_bg_collision_x
	.export		_bg_collision_y
	.export		_spr_enemy_collision
	.export		_set_generic
	.export		_spr_collectable_collision
	.export		_enable_bg_collision
	.export		_enable_bg_collision_x
	.export		_enable_bg_collision_y
	.export		_enemy_sprite_collision
	.export		_collectable_sprite_collision
	.export		_bg_collision_sub
	.export		_bg_check_low
	.export		_init_player
	.export		_player_movement
	.export		_add_enemy
	.export		_enemy1
	.export		_enemy2
	.export		_enemy3
	.export		_init_enemy
	.export		_enemy_movement_x
	.export		_enemy_movement_y
	.export		_enemy_movement
	.export		_add_collectable
	.export		_star1
	.export		_star2
	.export		_star3
	.export		_coin1
	.export		_coin2
	.export		_coin3
	.export		_coin4
	.export		_coin5
	.export		_life1
	.export		_life2
	.export		_life3
	.export		_init_collectables
	.export		_reset_collectables
	.export		_check_invincible_state
	.export		_load_level
	.export		_draw_sprites
	.export		_print_hud
	.export		_main

.segment	"DATA"

_xText:
	.word	$0000
_yText:
	.word	$0000
_update_index:
	.byte	$00
_enemy_index:
	.byte	$00
_collectable_index:
	.byte	$00
_scroll_x:
	.word	$0000
_scroll_y:
	.word	$0000
_game_level:
	.byte	$01
_max_coins:
	.byte	$05
_max_stars:
	.byte	$03
_max_lives:
	.byte	$03
_old_level:
	.byte	$01
_player_anim:
	.byte	$00
_enemy_item_count:
	.byte	$00
_collectables_item_count:
	.byte	$00
_blink_life:
	.byte	$00
_blink_cycle:
	.byte	$00
_menu_select:
	.byte	$00
_life_timer:
	.byte	$1E
_star_timer:
	.byte	$0F
_half_dead_state:
	.byte	$00
_invincible_state:
	.byte	$00
_hit_dead:
	.byte	$00
_level_offset:
	.byte	$01
_playerRobo:
	.word	$2FDF
	.word	$C200
	.word	$000A
	.word	$0008
	.byte	$00
	.byte	$01
	.byte	$FF
_enemy_list:
	.word	$0000
	.res	9,$00
	.res	44,$00
_collectable_list:
	.word	$0000
	.res	9,$00
	.res	44,$00
_enemy1:
	.word	$0000
	.res	9,$00
_enemy2:
	.word	$0000
	.res	9,$00
_enemy3:
	.word	$0000
	.res	9,$00
_star1:
	.word	$0000
	.res	9,$00
_star2:
	.word	$0000
	.res	9,$00
_star3:
	.word	$0000
	.res	9,$00
_coin1:
	.word	$0000
	.res	9,$00
_coin2:
	.word	$0000
	.res	9,$00
_coin3:
	.word	$0000
	.res	9,$00
_coin4:
	.word	$0000
	.res	9,$00
_coin5:
	.word	$0000
	.res	9,$00
_life1:
	.word	$0000
	.res	9,$00
_life2:
	.word	$0000
	.res	9,$00
_life3:
	.word	$0000
	.res	9,$00

.segment	"RODATA"

_metatiles_bg:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$4B
	.byte	$4C
	.byte	$5B
	.byte	$5C
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$3B
	.byte	$3E
	.byte	$1B
	.byte	$1E
	.byte	$00
	.byte	$1B
	.byte	$1E
	.byte	$1B
	.byte	$1E
	.byte	$00
	.byte	$49
	.byte	$4A
	.byte	$59
	.byte	$5A
	.byte	$02
	.byte	$4B
	.byte	$4C
	.byte	$5B
	.byte	$5C
	.byte	$02
	.byte	$43
	.byte	$44
	.byte	$53
	.byte	$54
	.byte	$02
	.byte	$44
	.byte	$45
	.byte	$54
	.byte	$55
	.byte	$02
	.byte	$46
	.byte	$47
	.byte	$56
	.byte	$57
	.byte	$02
	.byte	$47
	.byte	$47
	.byte	$57
	.byte	$58
	.byte	$02
	.byte	$43
	.byte	$44
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$54
	.byte	$54
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$54
	.byte	$55
	.byte	$00
	.byte	$46
	.byte	$47
	.byte	$56
	.byte	$57
	.byte	$00
	.byte	$47
	.byte	$47
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$47
	.byte	$48
	.byte	$57
	.byte	$58
	.byte	$00
	.byte	$1A
	.byte	$1A
	.byte	$1A
	.byte	$1A
	.byte	$01
	.byte	$41
	.byte	$41
	.byte	$41
	.byte	$41
	.byte	$02
	.byte	$41
	.byte	$41
	.byte	$42
	.byte	$42
	.byte	$01
	.byte	$1B
	.byte	$1E
	.byte	$47
	.byte	$02
	.byte	$01
	.byte	$3C
	.byte	$3E
	.byte	$3C
	.byte	$3D
	.byte	$01
	.byte	$1C
	.byte	$1D
	.byte	$42
	.byte	$42
	.byte	$01
	.byte	$1F
	.byte	$1F
	.byte	$1F
	.byte	$1F
	.byte	$01
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$0E
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$03
	.byte	$1B
	.byte	$42
	.byte	$5B
	.byte	$42
	.byte	$03
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$03
	.byte	$1E
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$03
	.byte	$70
	.byte	$71
	.byte	$75
	.byte	$76
	.byte	$03
	.byte	$72
	.byte	$73
	.byte	$77
	.byte	$78
	.byte	$03
	.byte	$74
	.byte	$00
	.byte	$79
	.byte	$00
	.byte	$03
	.byte	$80
	.byte	$81
	.byte	$86
	.byte	$87
	.byte	$02
	.byte	$82
	.byte	$83
	.byte	$88
	.byte	$89
	.byte	$02
	.byte	$84
	.byte	$85
	.byte	$8A
	.byte	$8B
	.byte	$02
	.byte	$71
	.byte	$72
	.byte	$76
	.byte	$77
	.byte	$03
	.byte	$7A
	.byte	$7A
	.byte	$7A
	.byte	$7A
	.byte	$02
	.byte	$67
	.byte	$68
	.byte	$75
	.byte	$76
	.byte	$01
	.byte	$69
	.byte	$6A
	.byte	$77
	.byte	$78
	.byte	$01
	.byte	$6B
	.byte	$6D
	.byte	$77
	.byte	$79
	.byte	$01
_enemy_spr_0_data:
	.byte	$F8
	.byte	$F8
	.byte	$0A
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$1A
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$0A
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$41
	.byte	$80
_enemy_spr_1_data:
	.byte	$F8
	.byte	$F8
	.byte	$45
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$55
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$45
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$41
	.byte	$80
_enemy_spr_2_data:
	.byte	$F8
	.byte	$F8
	.byte	$40
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$41
	.byte	$80
_enemy_spr_3_data:
	.byte	$F8
	.byte	$F8
	.byte	$0E
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$1E
	.byte	$02
	.byte	$00
	.byte	$F8
	.byte	$0E
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$42
	.byte	$80
_enemy_spr_4_data:
	.byte	$F8
	.byte	$F8
	.byte	$0F
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$1F
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$0F
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$41
	.byte	$80
_enemy_spr_5_data:
	.byte	$F8
	.byte	$F8
	.byte	$07
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$17
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$07
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$17
	.byte	$41
	.byte	$80
_enemy_spr_6_data:
	.byte	$F8
	.byte	$F8
	.byte	$41
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$51
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$41
	.byte	$80
_enemy_spr_7_data:
	.byte	$F8
	.byte	$F8
	.byte	$0B
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$1B
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$0B
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$1B
	.byte	$41
	.byte	$80
_enemy_spr_8_data:
	.byte	$F8
	.byte	$F8
	.byte	$0C
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$1C
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$0C
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$41
	.byte	$80
_enemy_spr_9_data:
	.byte	$F8
	.byte	$F8
	.byte	$42
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$52
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$42
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$41
	.byte	$80
_enemy_spr_10_data:
	.byte	$F8
	.byte	$F8
	.byte	$43
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$53
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$43
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$41
	.byte	$80
_enemy_spr_11_data:
	.byte	$F8
	.byte	$F8
	.byte	$46
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$56
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$46
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$41
	.byte	$80
_enemy_spr_list:
	.addr	_enemy_spr_0_data
	.addr	_enemy_spr_1_data
	.addr	_enemy_spr_2_data
	.addr	_enemy_spr_3_data
	.addr	_enemy_spr_4_data
	.addr	_enemy_spr_5_data
	.addr	_enemy_spr_6_data
	.addr	_enemy_spr_7_data
	.addr	_enemy_spr_8_data
	.addr	_enemy_spr_9_data
	.addr	_enemy_spr_10_data
	.addr	_enemy_spr_11_data
_player_robo_spr_0_data:
	.byte	$F8
	.byte	$F8
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$81
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$80
_player_robo_spr_1_data:
	.byte	$F8
	.byte	$F8
	.byte	$86
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$87
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$96
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$80
_player_robo_spr_2_data:
	.byte	$F8
	.byte	$F8
	.byte	$88
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$89
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$99
	.byte	$00
	.byte	$80
_player_robo_spr_3_data:
	.byte	$F8
	.byte	$F8
	.byte	$8A
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$8B
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$9A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9B
	.byte	$00
	.byte	$80
_player_robo_spr_4_data:
	.byte	$F8
	.byte	$F8
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$A1
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$00
	.byte	$80
_player_robo_spr_5_data:
	.byte	$F8
	.byte	$F8
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$A3
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$B2
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B3
	.byte	$00
	.byte	$80
_player_robo_spr_6_data:
	.byte	$F8
	.byte	$F8
	.byte	$A4
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$A5
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$B4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B5
	.byte	$00
	.byte	$80
_player_robo_spr_7_data:
	.byte	$F8
	.byte	$F8
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$83
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$80
_player_robo_spr_8_data:
	.byte	$F8
	.byte	$F8
	.byte	$84
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$85
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$94
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$80
_player_robo_spr_9_data:
	.byte	$F8
	.byte	$F8
	.byte	$8C
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$8D
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$9C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9D
	.byte	$00
	.byte	$80
_player_robo_spr_10_data:
	.byte	$F8
	.byte	$00
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9F
	.byte	$00
	.byte	$80
_player_robo_spr_11_data:
	.byte	$00
	.byte	$F8
	.byte	$80
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$81
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$91
	.byte	$40
	.byte	$80
_player_robo_spr_12_data:
	.byte	$00
	.byte	$F8
	.byte	$86
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$87
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$97
	.byte	$40
	.byte	$80
_player_robo_spr_13_data:
	.byte	$00
	.byte	$F8
	.byte	$88
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$89
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$99
	.byte	$40
	.byte	$80
_player_robo_spr_14_data:
	.byte	$00
	.byte	$F8
	.byte	$8A
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$8B
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$9B
	.byte	$40
	.byte	$80
_player_robo_spr_15_data:
	.byte	$00
	.byte	$F8
	.byte	$A0
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$A1
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$B1
	.byte	$40
	.byte	$80
_player_robo_spr_16_data:
	.byte	$00
	.byte	$F8
	.byte	$A2
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$A3
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$B3
	.byte	$40
	.byte	$80
_player_robo_spr_17_data:
	.byte	$00
	.byte	$F8
	.byte	$A4
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$A5
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$B4
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$B5
	.byte	$40
	.byte	$80
_player_robo_spr_18_data:
	.byte	$00
	.byte	$F8
	.byte	$82
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$83
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$93
	.byte	$40
	.byte	$80
_player_robo_spr_19_data:
	.byte	$00
	.byte	$F8
	.byte	$84
	.byte	$40
	.byte	$F8
	.byte	$F8
	.byte	$85
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$94
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$95
	.byte	$40
	.byte	$80
_player_robo_spr_list:
	.addr	_player_robo_spr_0_data
	.addr	_player_robo_spr_1_data
	.addr	_player_robo_spr_2_data
	.addr	_player_robo_spr_3_data
	.addr	_player_robo_spr_4_data
	.addr	_player_robo_spr_5_data
	.addr	_player_robo_spr_6_data
	.addr	_player_robo_spr_7_data
	.addr	_player_robo_spr_8_data
	.addr	_player_robo_spr_9_data
	.addr	_player_robo_spr_10_data
	.addr	_player_robo_spr_11_data
	.addr	_player_robo_spr_12_data
	.addr	_player_robo_spr_13_data
	.addr	_player_robo_spr_14_data
	.addr	_player_robo_spr_15_data
	.addr	_player_robo_spr_16_data
	.addr	_player_robo_spr_17_data
	.addr	_player_robo_spr_18_data
	.addr	_player_robo_spr_19_data
_collectables_spr_0_data:
	.byte	$F8
	.byte	$F8
	.byte	$60
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$70
	.byte	$02
	.byte	$00
	.byte	$F8
	.byte	$60
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$42
	.byte	$80
_collectables_spr_1_data:
	.byte	$F8
	.byte	$F8
	.byte	$44
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$54
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$44
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$41
	.byte	$80
_collectables_spr_2_data:
	.byte	$F8
	.byte	$F8
	.byte	$47
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$57
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$57
	.byte	$41
	.byte	$00
	.byte	$F8
	.byte	$47
	.byte	$01
	.byte	$80
_collectables_spr_3_data:
	.byte	$F8
	.byte	$F8
	.byte	$60
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$70
	.byte	$02
	.byte	$00
	.byte	$F8
	.byte	$60
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$42
	.byte	$80
_collectables_spr_4_data:
	.byte	$F8
	.byte	$F8
	.byte	$61
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$71
	.byte	$02
	.byte	$00
	.byte	$F8
	.byte	$62
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$02
	.byte	$80
_collectables_spr_5_data:
	.byte	$F8
	.byte	$F8
	.byte	$63
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$73
	.byte	$02
	.byte	$00
	.byte	$F8
	.byte	$64
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$02
	.byte	$80
_collectables_spr_6_data:
	.byte	$F8
	.byte	$F8
	.byte	$65
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$75
	.byte	$02
	.byte	$00
	.byte	$F8
	.byte	$66
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$02
	.byte	$80
_collectables_spr_list:
	.addr	_collectables_spr_0_data
	.addr	_collectables_spr_1_data
	.addr	_collectables_spr_2_data
	.addr	_collectables_spr_3_data
	.addr	_collectables_spr_4_data
	.addr	_collectables_spr_5_data
	.addr	_collectables_spr_6_data
_game_title:
	.byte	$05
	.byte	$72
	.byte	$05
	.byte	$3F
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$33
	.byte	$23
	.byte	$2F
	.byte	$32
	.byte	$25
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$2C
	.byte	$25
	.byte	$36
	.byte	$25
	.byte	$2C
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$D2
	.byte	$00
	.byte	$05
	.byte	$1A
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$D2
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$32
	.byte	$2F
	.byte	$22
	.byte	$2F
	.byte	$00
	.byte	$32
	.byte	$35
	.byte	$2E
	.byte	$00
	.byte	$2E
	.byte	$25
	.byte	$33
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$71
	.byte	$72
	.byte	$71
	.byte	$05
	.byte	$07
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$76
	.byte	$77
	.byte	$76
	.byte	$05
	.byte	$07
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$D2
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$2C
	.byte	$29
	.byte	$26
	.byte	$25
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$4D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$23
	.byte	$2F
	.byte	$29
	.byte	$2E
	.byte	$33
	.byte	$00
	.byte	$66
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$33
	.byte	$23
	.byte	$2F
	.byte	$32
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$5D
	.byte	$00
	.byte	$05
	.byte	$14
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$0D
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$0D
	.byte	$28
	.byte	$25
	.byte	$2C
	.byte	$30
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1B
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$A4
	.byte	$A5
	.byte	$00
	.byte	$05
	.byte	$13
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$77
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$21
	.byte	$33
	.byte	$25
	.byte	$25
	.byte	$22
	.byte	$00
	.byte	$12
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$36
	.byte	$11
	.byte	$B6
	.byte	$77
	.byte	$77
	.byte	$72
	.byte	$05
	.byte	$3F
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$F0
	.byte	$FF
	.byte	$05
	.byte	$02
	.byte	$F3
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$03
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$C0
	.byte	$30
	.byte	$00
	.byte	$FF
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$0F
	.byte	$03
	.byte	$80
	.byte	$A0
	.byte	$05
	.byte	$02
	.byte	$A3
	.byte	$A0
	.byte	$A0
	.byte	$23
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$05
	.byte	$00
_level_clear_title:
	.byte	$01
	.byte	$72
	.byte	$01
	.byte	$1F
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$32
	.byte	$2F
	.byte	$22
	.byte	$2F
	.byte	$00
	.byte	$32
	.byte	$35
	.byte	$2E
	.byte	$00
	.byte	$2E
	.byte	$25
	.byte	$33
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$71
	.byte	$72
	.byte	$71
	.byte	$01
	.byte	$07
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$76
	.byte	$77
	.byte	$76
	.byte	$01
	.byte	$07
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$01
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$2C
	.byte	$25
	.byte	$36
	.byte	$25
	.byte	$2C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$23
	.byte	$2C
	.byte	$25
	.byte	$21
	.byte	$32
	.byte	$25
	.byte	$24
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$33
	.byte	$23
	.byte	$2F
	.byte	$32
	.byte	$25
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$2C
	.byte	$29
	.byte	$36
	.byte	$25
	.byte	$33
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$01
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$72
	.byte	$01
	.byte	$1F
	.byte	$15
	.byte	$F5
	.byte	$01
	.byte	$05
	.byte	$45
	.byte	$11
	.byte	$5F
	.byte	$01
	.byte	$05
	.byte	$44
	.byte	$11
	.byte	$55
	.byte	$01
	.byte	$05
	.byte	$44
	.byte	$11
	.byte	$55
	.byte	$55
	.byte	$9D
	.byte	$55
	.byte	$11
	.byte	$44
	.byte	$44
	.byte	$11
	.byte	$55
	.byte	$01
	.byte	$05
	.byte	$44
	.byte	$D1
	.byte	$F0
	.byte	$FA
	.byte	$FA
	.byte	$3A
	.byte	$C2
	.byte	$F0
	.byte	$74
	.byte	$DD
	.byte	$FF
	.byte	$01
	.byte	$05
	.byte	$77
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_game_over_title:
	.byte	$01
	.byte	$72
	.byte	$01
	.byte	$1F
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$32
	.byte	$2F
	.byte	$22
	.byte	$2F
	.byte	$00
	.byte	$32
	.byte	$35
	.byte	$2E
	.byte	$00
	.byte	$2E
	.byte	$25
	.byte	$33
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$71
	.byte	$72
	.byte	$71
	.byte	$01
	.byte	$07
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$76
	.byte	$77
	.byte	$76
	.byte	$01
	.byte	$07
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$01
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$27
	.byte	$21
	.byte	$2D
	.byte	$25
	.byte	$00
	.byte	$2F
	.byte	$36
	.byte	$25
	.byte	$32
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$33
	.byte	$23
	.byte	$2F
	.byte	$32
	.byte	$25
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$23
	.byte	$2F
	.byte	$29
	.byte	$2E
	.byte	$33
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$5D
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$42
	.byte	$01
	.byte	$17
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$57
	.byte	$00
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$00
	.byte	$57
	.byte	$72
	.byte	$01
	.byte	$1F
	.byte	$15
	.byte	$F5
	.byte	$01
	.byte	$05
	.byte	$45
	.byte	$11
	.byte	$5F
	.byte	$01
	.byte	$05
	.byte	$44
	.byte	$11
	.byte	$55
	.byte	$A5
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$44
	.byte	$11
	.byte	$55
	.byte	$55
	.byte	$5D
	.byte	$55
	.byte	$11
	.byte	$44
	.byte	$44
	.byte	$11
	.byte	$55
	.byte	$01
	.byte	$05
	.byte	$44
	.byte	$D1
	.byte	$F0
	.byte	$F6
	.byte	$F5
	.byte	$35
	.byte	$C1
	.byte	$F0
	.byte	$74
	.byte	$DD
	.byte	$FF
	.byte	$01
	.byte	$05
	.byte	$77
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_level1_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$1E
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$1E
	.byte	$1E
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$26
	.byte	$26
	.byte	$26
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$26
	.byte	$26
	.byte	$26
	.byte	$26
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1E
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1A
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_level1_list:
	.addr	_level1_0
_level2_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$27
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$0D
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0F
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$18
	.byte	$18
	.byte	$18
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$1E
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$21
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$27
	.byte	$0B
	.byte	$0C
	.byte	$27
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$1E
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_level2_list:
	.addr	_level2_0
_level3_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$1E
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$17
	.byte	$17
	.byte	$17
	.byte	$17
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$0D
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0F
	.byte	$13
	.byte	$00
	.byte	$27
	.byte	$27
	.byte	$1E
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$12
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$10
	.byte	$13
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$13
	.byte	$1E
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$24
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$12
	.byte	$29
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$29
	.byte	$10
	.byte	$12
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$1E
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_level3_list:
	.addr	_level3_0
_level4_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$09
	.byte	$27
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$23
	.byte	$24
	.byte	$24
	.byte	$24
	.byte	$24
	.byte	$25
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$25
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$24
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$1E
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$29
	.byte	$29
	.byte	$29
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$27
	.byte	$26
	.byte	$26
	.byte	$26
	.byte	$03
	.byte	$26
	.byte	$0B
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$26
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$27
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_level4_list:
	.addr	_level4_0
_level5_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$27
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$0E
	.byte	$21
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$00
	.byte	$21
	.byte	$21
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$29
	.byte	$29
	.byte	$29
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$05
	.byte	$1E
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$1E
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$26
	.byte	$26
	.byte	$0C
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$26
	.byte	$26
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_level5_list:
	.addr	_level5_0
_level_list:
	.addr	_level1_0
	.addr	_level2_0
	.addr	_level3_0
	.addr	_level4_0
	.addr	_level5_0
_game_help_title:
	.byte	$05
	.byte	$72
	.byte	$05
	.byte	$20
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$72
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$32
	.byte	$2F
	.byte	$22
	.byte	$2F
	.byte	$00
	.byte	$32
	.byte	$35
	.byte	$2E
	.byte	$00
	.byte	$2E
	.byte	$25
	.byte	$33
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$25
	.byte	$2C
	.byte	$30
	.byte	$00
	.byte	$29
	.byte	$2E
	.byte	$26
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$71
	.byte	$72
	.byte	$71
	.byte	$05
	.byte	$07
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$D2
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$76
	.byte	$77
	.byte	$76
	.byte	$05
	.byte	$07
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$D2
	.byte	$00
	.byte	$05
	.byte	$19
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$2C
	.byte	$29
	.byte	$36
	.byte	$25
	.byte	$33
	.byte	$00
	.byte	$26
	.byte	$32
	.byte	$2F
	.byte	$2D
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$22
	.byte	$2C
	.byte	$29
	.byte	$2E
	.byte	$2B
	.byte	$33
	.byte	$00
	.byte	$29
	.byte	$26
	.byte	$00
	.byte	$2C
	.byte	$29
	.byte	$26
	.byte	$25
	.byte	$00
	.byte	$29
	.byte	$33
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$00
	.byte	$2D
	.byte	$21
	.byte	$2B
	.byte	$25
	.byte	$33
	.byte	$00
	.byte	$39
	.byte	$2F
	.byte	$35
	.byte	$00
	.byte	$29
	.byte	$2E
	.byte	$36
	.byte	$29
	.byte	$2E
	.byte	$23
	.byte	$29
	.byte	$22
	.byte	$2C
	.byte	$25
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$2F
	.byte	$32
	.byte	$00
	.byte	$11
	.byte	$15
	.byte	$33
	.byte	$00
	.byte	$22
	.byte	$35
	.byte	$34
	.byte	$00
	.byte	$2E
	.byte	$2F
	.byte	$34
	.byte	$00
	.byte	$29
	.byte	$26
	.byte	$00
	.byte	$2C
	.byte	$29
	.byte	$26
	.byte	$25
	.byte	$00
	.byte	$29
	.byte	$33
	.byte	$00
	.byte	$11
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$25
	.byte	$21
	.byte	$23
	.byte	$28
	.byte	$00
	.byte	$2C
	.byte	$25
	.byte	$36
	.byte	$25
	.byte	$2C
	.byte	$00
	.byte	$28
	.byte	$21
	.byte	$33
	.byte	$00
	.byte	$14
	.byte	$03
	.byte	$15
	.byte	$00
	.byte	$23
	.byte	$2F
	.byte	$29
	.byte	$2E
	.byte	$33
	.byte	$00
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$39
	.byte	$2F
	.byte	$35
	.byte	$00
	.byte	$2D
	.byte	$35
	.byte	$33
	.byte	$34
	.byte	$00
	.byte	$23
	.byte	$2F
	.byte	$2C
	.byte	$2C
	.byte	$25
	.byte	$23
	.byte	$34
	.byte	$00
	.byte	$21
	.byte	$2C
	.byte	$2C
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$33
	.byte	$23
	.byte	$2F
	.byte	$32
	.byte	$25
	.byte	$00
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$25
	.byte	$34
	.byte	$33
	.byte	$00
	.byte	$25
	.byte	$36
	.byte	$25
	.byte	$32
	.byte	$39
	.byte	$00
	.byte	$2C
	.byte	$25
	.byte	$36
	.byte	$25
	.byte	$2C
	.byte	$00
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$34
	.byte	$33
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$25
	.byte	$2E
	.byte	$25
	.byte	$2D
	.byte	$39
	.byte	$00
	.byte	$2B
	.byte	$29
	.byte	$2C
	.byte	$2C
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$34
	.byte	$33
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$23
	.byte	$2F
	.byte	$29
	.byte	$2E
	.byte	$00
	.byte	$23
	.byte	$2F
	.byte	$2C
	.byte	$2C
	.byte	$25
	.byte	$23
	.byte	$34
	.byte	$25
	.byte	$24
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$34
	.byte	$33
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$00
	.byte	$23
	.byte	$2F
	.byte	$2C
	.byte	$2C
	.byte	$25
	.byte	$23
	.byte	$34
	.byte	$25
	.byte	$24
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$04
	.byte	$15
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$34
	.byte	$33
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$2B
	.byte	$29
	.byte	$2C
	.byte	$2C
	.byte	$25
	.byte	$24
	.byte	$00
	.byte	$22
	.byte	$39
	.byte	$00
	.byte	$25
	.byte	$2E
	.byte	$25
	.byte	$2D
	.byte	$39
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$34
	.byte	$2F
	.byte	$00
	.byte	$23
	.byte	$2F
	.byte	$2E
	.byte	$34
	.byte	$29
	.byte	$2E
	.byte	$35
	.byte	$25
	.byte	$A6
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1A
	.byte	$B6
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$05
	.byte	$1D
	.byte	$72
	.byte	$05
	.byte	$20
	.byte	$00
	.byte	$F0
	.byte	$05
	.byte	$05
	.byte	$10
	.byte	$00
	.byte	$FF
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$1F
	.byte	$33
	.byte	$40
	.byte	$50
	.byte	$05
	.byte	$05
	.byte	$23
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$05
	.byte	$00
_palette_spr:
	.byte	$00
	.byte	$11
	.byte	$26
	.byte	$36
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$00
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$00
	.byte	$38
	.byte	$19
	.byte	$29
_palette_title:
	.byte	$21
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$21
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$21
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$21
	.byte	$38
	.byte	$19
	.byte	$29
_palette_bg1:
	.byte	$20
	.byte	$02
	.byte	$17
	.byte	$16
	.byte	$0A
	.byte	$12
	.byte	$22
	.byte	$32
	.byte	$0A
	.byte	$13
	.byte	$15
	.byte	$33
	.byte	$0A
	.byte	$14
	.byte	$07
	.byte	$34
_palette_bg2:
	.byte	$20
	.byte	$17
	.byte	$21
	.byte	$04
	.byte	$22
	.byte	$17
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$06
	.byte	$15
	.byte	$06
	.byte	$22
	.byte	$07
	.byte	$17
	.byte	$3C
_palette_bg3:
	.byte	$20
	.byte	$04
	.byte	$1C
	.byte	$04
	.byte	$22
	.byte	$17
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$06
	.byte	$15
	.byte	$06
	.byte	$22
	.byte	$07
	.byte	$17
	.byte	$3C
_is_solid:
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$80
	.byte	$40
	.byte	$80
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$80
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
S0016:
	.byte	$25,$63,$25,$63,$25,$30,$2E,$32,$64,$25,$63,$25,$64,$20,$20,$20
	.byte	$20,$25,$63,$25,$63,$25,$30,$2E,$32,$64,$20,$20,$20,$20,$25,$63
	.byte	$25,$63,$25,$30,$2E,$32,$64,$20,$20,$20,$20,$25,$63,$25,$63,$25
	.byte	$30,$2E,$35,$64,$0A,$00
S0002:
	.byte	$50,$4C,$45,$41,$53,$45,$20,$53,$57,$49,$54,$43,$48,$20,$54,$4F
	.byte	$20,$50,$41,$4C,$20,$4F,$52,$20,$44,$45,$4E,$44,$59,$00
S0001:
	.byte	$57,$52,$4F,$4E,$47,$20,$56,$49,$44,$45,$4F,$20,$52,$45,$47,$49
	.byte	$4F,$4E,$20,$53,$45,$4C,$45,$43,$54,$45,$44,$0A,$00
S0003	:=	S0001+0
S0004:
	.byte	$50,$4C,$45,$41,$53,$45,$20,$53,$57,$49,$54,$43,$48,$20,$54,$4F
	.byte	$20,$4E,$54,$53,$43,$00
S0015:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
S0014:
	.byte	$47,$41,$4D,$45,$20,$50,$41,$55,$53,$45,$44,$00
S0008:
	.byte	$25,$63,$25,$63,$25,$30,$2E,$32,$64,$20,$00
S0009	:=	S0008+0
S0013:
	.byte	$25,$30,$2E,$32,$64,$00
S0010	:=	S0013+0
S000F:
	.byte	$25,$30,$2E,$35,$64,$00
S0012	:=	S000F+0
S000D:
	.byte	$25,$63,$25,$63,$00
S000C	:=	S000D+0
S000A	:=	S000D+0
S000B	:=	S000D+0
S000E	:=	S000D+2
S0017	:=	S000D+2
S0011	:=	S000D+2

.segment	"BSS"

_ppu_region:
	.res	1,$00
_fade_index:
	.res	1,$00
_gpit:
	.res	1,$00
_rda:
	.res	1,$00
_gp_addr:
	.res	2,$00
_update_list:
	.res	91,$00
_enemy_direction:
	.res	1,$00
_old_enemy_direction:
	.res	1,$00
.segment	"ZEROPAGE"
_index:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_object_L:
	.res	1,$00
_object_R:
	.res	1,$00
_object_U:
	.res	1,$00
_object_D:
	.res	1,$00
_map_coords:
	.res	1,$00
_p_maps:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_map:
	.res	1,$00
_lowX:
	.res	1,$00
_highX:
	.res	1,$00
_lowY:
	.res	1,$00
_temp4:
	.res	1,$00
_L_R_switch:
	.res	1,$00
_old_x:
	.res	2,$00
_upperLeft:
	.res	2,$00
_up_l_back:
	.res	2,$00
_score:
	.res	2,$00
_old_score:
	.res	2,$00
_total_score:
	.res	2,$00
_lives:
	.res	1,$00
_stars:
	.res	1,$00
_coins:
	.res	1,$00
_total_coins:
	.res	1,$00
_old_lives:
	.res	1,$00
_old_stars:
	.res	1,$00
_old_coins:
	.res	1,$00
_game_mode:
	.res	1,$00
_player_vel_state:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_genericBase1:
	.res	4,$00
_genericBase2:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ _update_nt_text (unsigned char x, unsigned char y, unsigned char l, char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__update_nt_text: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; gp_addr = NAMETABLE_A + (y << 5) + x;
;
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     tmp1
	clc
	adc     #$20
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0006
	inx
L0006:	sta     _gp_addr
	stx     _gp_addr+1
;
; UPDATE_NT_BUF = MSB(gp_addr) | NT_UPD_HORZ; // Horizontal type text. change to NT_UPD_VERT for Vertical text
;
	lda     _update_index
	inc     _update_index
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _gp_addr+1
	ora     #$40
	ldy     #$00
	sta     (ptr1),y
;
; UPDATE_NT_BUF = LSB(gp_addr);
;
	lda     _update_index
	inc     _update_index
	clc
	adc     #<(_update_list)
	sta     ptr1
	tya
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _gp_addr
	sta     (ptr1),y
;
; UPDATE_NT_BUF = l; //l - length of text.
;
	lda     _update_index
	inc     _update_index
	clc
	adc     #<(_update_list)
	sta     ptr1
	tya
	adc     #>(_update_list)
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; gpit = l;
;
	ldy     #$02
	lda     (sp),y
	sta     _gpit
;
; while (gpit--)
;
	jmp     L0007
;
; UPDATE_NT_BUF = *s++ + NES_TEXT_TILE_INDEX - 0x20;
;
L0002:	lda     _update_index
	inc     _update_index
	clc
	adc     #<(_update_list)
	sta     sreg
	lda     #$00
	adc     #>(_update_list)
	sta     sreg+1
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	sec
	sbc     #$20
	sta     (sreg),y
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
;
; while (gpit--)
;
L0007:	lda     _gpit
	dec     _gpit
	tax
	bne     L0002
;
; }
;
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ nes_load_title (char *title, unsigned int nametable)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_load_title: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; vram_adr(nametable);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; vram_unrle(title);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_unrle
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ nes_load_title_a (char *title)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_load_title_a: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_unrle
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ nes_load_title_b (char *title)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_load_title_b: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_unrle
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ nes_hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_hud_update: near

.segment	"CODE"

;
; update_list[update_index] = NT_UPD_EOF;
;
	ldy     _update_index
	lda     #$FF
	sta     _update_list,y
;
; update_index = 0; // Reset update list
;
	lda     #$00
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ nes_fade_transition_fg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_fade_transition_fg: near

.segment	"CODE"

;
; if (get_frame_count() % (1 << 4) == 0)
;
	jsr     _get_frame_count
	and     #$0F
	bne     L0002
;
; pal_col(1, rand8() & 4);
;
	lda     #$01
	jsr     pusha
	jsr     _rand8
	and     #$04
	jsr     _pal_col
;
; pal_col(3, rand8() & 4);
;
	lda     #$03
	jsr     pusha
	jsr     _rand8
	and     #$04
	jsr     _pal_col
;
; delay(10);
;
	lda     #$0A
	jmp     _delay
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ nes_fade_transition_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_fade_transition_bg: near

.segment	"CODE"

;
; if (get_frame_count() % (1 << 4) == 0)
;
	jsr     _get_frame_count
	and     #$0F
	bne     L0002
;
; pal_col(0, rand8() & 4);
;
	jsr     pusha
	jsr     _rand8
	and     #$04
	jsr     _pal_col
;
; pal_col(2, rand8() & 4);
;
	lda     #$02
	jsr     pusha
	jsr     _rand8
	and     #$04
	jsr     _pal_col
;
; delay(10);
;
	lda     #$0A
	jmp     _delay
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ nes_show_region_error (unsigned char region_type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_show_region_error: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; ppu_region = REGION_DENDY + 1; //Error set initial.
;
	lda     #$03
	sta     _ppu_region
;
; if (ppu_system() && region_type == REGION_NTSC)
;
	jsr     _ppu_system
	tax
	beq     L0002
	ldy     #$00
	lda     (sp),y
	bne     L0002
;
; NES_GOTOXY(3, 15);
;
	tax
	lda     #$03
	sta     _xText
	stx     _xText+1
	lda     #$0F
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("WRONG VIDEO REGION SELECTED\n");
;
	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     pushax
	ldy     #$02
	jsr     _nes_text_hud
;
; NES_GOTOXY(3, 17);
;
	ldx     #$00
	lda     #$03
	sta     _xText
	stx     _xText+1
	lda     #$11
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("PLEASE SWITCH TO PAL OR DENDY");
;
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     pushax
	ldy     #$02
	jsr     _nes_text_hud
;
; ppu_region = REGION_NTSC;
;
	lda     #$00
;
; else if (!ppu_system() && region_type == REGION_PAL || region_type == REGION_DENDY)
;
	jmp     L000F
L0002:	jsr     _ppu_system
	tax
	bne     L0008
	lda     (sp,x)
	cmp     #$01
	beq     L0015
L0008:	ldy     #$00
	lda     (sp),y
	cmp     #$02
	bne     L0016
;
; NES_GOTOXY(3, 15);
;
	ldx     #$00
L0015:	lda     #$03
	sta     _xText
	stx     _xText+1
	lda     #$0F
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("WRONG VIDEO REGION SELECTED\n");
;
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     pushax
	ldy     #$02
	jsr     _nes_text_hud
;
; NES_GOTOXY(3, 17);
;
	ldx     #$00
	lda     #$03
	sta     _xText
	stx     _xText+1
	lda     #$11
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("PLEASE SWITCH TO NTSC");
;
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     pushax
	ldy     #$02
	jsr     _nes_text_hud
;
; ppu_region = REGION_PAL;
;
	lda     #$01
L000F:	sta     _ppu_region
;
; if (ppu_region <= REGION_DENDY)
;
L0016:	lda     _ppu_region
	cmp     #$03
	bcs     L000D
;
; nes_clear_nametable(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _nes_clear_nametable
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L000C:	jsr     _ppu_wait_nmi
;
; nes_fade_transition_fg();
;
	jsr     _nes_fade_transition_fg
;
; while (TRUE)
;
	jmp     L000C
;
; }
;
L000D:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ nes_exit_cleanup (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_exit_cleanup: near

.segment	"CODE"

;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; oam_clear();
;
	jsr     _oam_clear
;
; music_stop();
;
	jsr     _music_stop
;
; nes_fade_out();
;
	jsr     _nes_fade_out
;
; ppu_off();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ nes_fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_fade_out: near

.segment	"CODE"

;
; for (fade_index = 4; fade_index > 0; fade_index--)
;
	lda     #$04
	sta     _fade_index
L0006:	lda     _fade_index
	beq     L0003
;
; pal_bright(fade_index);
;
	jsr     _pal_bright
;
; delay(FADE_DELAY);
;
	lda     #$04
	jsr     _delay
;
; for (fade_index = 4; fade_index > 0; fade_index--)
;
	dec     _fade_index
	jmp     L0006
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ nes_fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_fade_in: near

.segment	"CODE"

;
; for (fade_index = 0; fade_index < 5; fade_index++)
;
	lda     #$00
	sta     _fade_index
L0006:	lda     _fade_index
	cmp     #$05
	bcs     L0003
;
; pal_bright(fade_index);
;
	jsr     _pal_bright
;
; delay(FADE_DELAY);
;
	lda     #$04
	jsr     _delay
;
; for (fade_index = 0; fade_index < 5; fade_index++)
;
	inc     _fade_index
	jmp     L0006
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ nes_palette_rand (unsigned char paletteType)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_palette_rand: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; uint8_t bgPalette[16] = {NULL}, sprPalette[16] = {NULL};
;
	ldy     #$10
	jsr     subysp
	ldy     #$0F
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
	ldy     #$10
	jsr     subysp
	ldy     #$0F
L0003:	lda     M0002,y
	sta     (sp),y
	dey
	bpl     L0003
;
; uint8_t i = 0;
;
	lda     #$00
	jsr     pusha
;
; for (i = 0; i < 16; ++i)
;
	tay
L0015:	sta     (sp),y
	cmp     #$10
	jcs     L0005
;
; bgPalette[i] = (i + rand8() + (i * 2)) % 0x3F;
;
	lda     sp
	ldx     sp+1
	clc
	adc     #$11
	bcc     L001A
	inx
	clc
L001A:	adc     (sp),y
	bcc     L0009
	inx
L0009:	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	jsr     _rand8
	jsr     tosaddax
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0014
	inx
L0014:	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$3F
	jsr     tosmoda0
	ldy     #$00
	jsr     staspidx
;
; sprPalette[i] = (i + rand8() + (i * 1)) % 0x3F;
;
	lda     sp
	ldx     sp+1
	clc
	adc     #$01
	bcc     L000A
	inx
L000A:	ldy     #$00
	clc
	adc     (sp),y
	bcc     L000B
	inx
L000B:	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	jsr     _rand8
	jsr     tosaddax
	jsr     pushax
	ldy     #$04
	lda     (sp),y
	jsr     tosadda0
	jsr     pushax
	ldx     #$00
	lda     #$3F
	jsr     tosmoda0
	ldy     #$00
	jsr     staspidx
;
; for (i = 0; i < 16; ++i)
;
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0015
;
; if (paletteType == PALETTE_TYPE_BG)
;
L0005:	ldy     #$21
	lda     (sp),y
	bne     L0018
;
; pal_bg(bgPalette);
;
	lda     sp
	ldx     sp+1
	clc
	adc     #$11
	bcc     L000D
	inx
L000D:	jsr     _pal_bg
;
; else if (paletteType == PALETTE_TYPE_SPR)
;
	jmp     L0011
L0018:	lda     (sp),y
	cmp     #$01
;
; else
;
	beq     L001F
;
; pal_bg(bgPalette);
;
	lda     sp
	ldx     sp+1
	clc
	adc     #$11
	bcc     L0012
	inx
L0012:	jsr     _pal_bg
;
; pal_spr(sprPalette);
;
L001F:	lda     sp
	ldx     sp+1
	clc
	adc     #$01
	bcc     L0013
	inx
L0013:	jsr     _pal_spr
;
; }
;
L0011:	ldy     #$22
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$00
	.res	15,$00
M0002:
	.byte	$00
	.res	15,$00

.endproc

; ---------------------------------------------------------------
; void __near__ nes_text_hud (const char *format, ...)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_text_hud: near

.segment	"CODE"

;
; {
;
	jsr     enter
;
; char textBuf[32] = {NULL};
;
	ldy     #$20
	jsr     subysp
	ldy     #$1F
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
;
; va_start(args, format);
;
	jsr     decsp2
	ldy     #$22
	lda     (sp),y
	jsr     leaa0sp
	clc
	adc     #$21
	bcc     L0003
	inx
L0003:	jsr     stax0sp
;
; vsprintf(textBuf, format, args);
;
	jsr     decsp4
	lda     sp
	ldx     sp+1
	clc
	adc     #$06
	bcc     L0004
	inx
L0004:	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$26
	lda     (sp),y
	jsr     leaa0sp
	clc
	adc     #$25
	bcc     L0005
	inx
L0005:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vsprintf
;
; _update_nt_text(xText, yText, strlen(textBuf), textBuf);
;
	jsr     decsp3
	lda     _xText
	ldy     #$02
	sta     (sp),y
	lda     _yText
	dey
	sta     (sp),y
	ldx     #$FF
	ldy     #$04
L0006:	inx
	iny
	lda     (sp),y
	bne     L0006
	txa
	ldy     #$00
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$05
	bcc     L0007
	inx
L0007:	jsr     __update_nt_text
;
; if (textBuf[strlen(textBuf) - 1] == '\n')
;
	ldx     #$FF
	ldy     #$01
L0009:	inx
	iny
	lda     (sp),y
	bne     L0009
	txa
	ldx     #$00
	sec
	sbc     #$01
	bcs     L000A
	dex
L000A:	clc
	adc     #$02
	bcc     L000B
	inx
	clc
L000B:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$0A
	bne     L0008
;
; yText++;
;
	inc     _yText
	bne     L000C
	inc     _yText+1
;
; xText = 0;
;
L000C:	tya
	sta     _xText
	sta     _xText+1
;
; if (textBuf[strlen(textBuf) - 1] == '\t')
;
L0008:	ldx     #$FF
	iny
L000E:	inx
	iny
	lda     (sp),y
	bne     L000E
	txa
	ldx     #$00
	sec
	sbc     #$01
	bcs     L000F
	dex
L000F:	clc
	adc     #$02
	bcc     L0010
	inx
	clc
L0010:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	cmp     #$09
	bne     L000D
;
; xText += strlen(textBuf) + 4;
;
	dex
	ldy     #$01
L0011:	inx
	iny
	lda     (sp),y
	bne     L0011
	txa
	ldx     #$00
	clc
	adc     #$04
	bcc     L0013
	inx
	clc
L0013:	adc     _xText
	sta     _xText
	txa
	adc     _xText+1
	sta     _xText+1
	tax
	lda     _xText
;
; }
;
L000D:	ldy     #$22
	jmp     leavey

.segment	"RODATA"

M0001:
	.byte	$00
	.res	31,$00

.endproc

; ---------------------------------------------------------------
; void __near__ nes_clear_nametable (unsigned int nametable)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nes_clear_nametable: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(nametable);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; vram_fill(0, 1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ _print_nt_text (unsigned char x, unsigned char y, unsigned char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__print_nt_text: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; vram_adr(NAMETABLE_A + (y << 5) + x);
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     tmp1
	clc
	adc     #$20
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0006
	inx
L0006:	jsr     _vram_adr
;
; while (rda = *s++)
;
	jmp     L0004
;
; vram_put(rda - +NES_TEXT_TILE_INDEX - 0x20);
;
L0002:	lda     _rda
	sec
	sbc     #$20
	jsr     _vram_put
;
; while (rda = *s++)
;
L0004:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	sta     _rda
	tax
	php
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	plp
	bne     L0002
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (struct Base *basePlayer)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; collision_L = collision_R = collision_U = collision_D = 0;
;
	lda     #$00
	sta     _collision_D
	sta     _collision_U
	sta     _collision_R
	sta     _collision_L
;
; if (basePlayer->y >= 0xf0)
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	cmp     #$F0
;
; return;
;
	jcs     L000E
;
; up_l_back = upperLeft = basePlayer->x + scroll_x;
;
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	clc
	adc     _scroll_x
	pha
	tya
	adc     _scroll_x+1
	tax
	pla
	sta     _upperLeft
	stx     _upperLeft+1
	sta     _up_l_back
	stx     _up_l_back+1
;
; lowX = upperLeft & 0xff;
;
	lda     _upperLeft
	sta     _lowX
;
; highX = upperLeft >> 8;
;
	lda     _upperLeft+1
	sta     _highX
;
; eject_L = lowX | 0xf0;
;
	lda     _lowX
	ora     #$F0
	sta     _eject_L
;
; lowY = basePlayer->y;
;
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	sta     _lowY
;
; eject_U = lowY | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if (L_R_switch)
;
	lda     _L_R_switch
	beq     L0003
;
; lowY += 5;
;
	lda     #$05
	clc
	adc     _lowY
	sta     _lowY
;
; bg_collision_sub();
;
L0003:	jsr     _bg_collision_sub
;
; if (collision & COL_ALL)
;
	lda     _collision
	and     #$40
	beq     L0004
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; upperLeft += basePlayer->width;
;
L0004:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     _upperLeft
	sta     _upperLeft
	lda     #$00
	adc     _upperLeft+1
	sta     _upperLeft+1
;
; lowX = upperLeft & 0xff;
;
	lda     _upperLeft
	sta     _lowX
;
; highX = upperLeft >> 8;
;
	lda     _upperLeft+1
	sta     _highX
;
; eject_R = (lowX + 1) & 0x0f;
;
	lda     _lowX
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (collision & COL_ALL)
;
	lda     _collision
	and     #$40
	beq     L0006
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; lowY = basePlayer->y + basePlayer->height;
;
L0006:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	sta     sreg
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     sreg
	sta     _lowY
;
; if (L_R_switch)
;
	lda     _L_R_switch
	beq     L0011
;
; lowY -= 2;
;
	lda     _lowY
	sec
	sbc     #$02
	sta     _lowY
;
; eject_D = (lowY + 1) & 0x0f;
;
L0011:	lda     _lowY
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if (lowY >= 0xf0)
;
	lda     _lowY
	cmp     #$F0
;
; return;
;
	bcs     L000E
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (collision & COL_ALL)
;
	lda     _collision
	and     #$40
	beq     L0012
;
; ++collision_R;
;
	inc     _collision_R
;
; if (collision & (COL_DOWN | COL_ALL))
;
L0012:	lda     _collision
	and     #$C0
	beq     L000B
;
; ++collision_D;
;
	inc     _collision_D
;
; lowX = up_l_back & 0xff;
;
L000B:	lda     _up_l_back
	sta     _lowX
;
; highX = up_l_back >> 8;
;
	lda     _up_l_back+1
	sta     _highX
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (collision & COL_ALL)
;
	lda     _collision
	and     #$40
	beq     L0013
;
; ++collision_L;
;
	inc     _collision_L
;
; if (collision & (COL_DOWN | COL_ALL))
;
L0013:	lda     _collision
	and     #$C0
	beq     L0014
;
; ++collision_D;
;
	inc     _collision_D
;
; if ((lowY & 0x0f) > 3) //top 3 pixels
;
L0014:	lda     _lowY
	and     #$0F
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L000F
	eor     #$80
L000F:	bpl     L000E
;
; collision_D = 0; 
;
	lda     #$00
	sta     _collision_D
;
; }
;
L000E:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_x (struct Base *basePlayer)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_x: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; collision_L = collision_R = 0;
;
	lda     #$00
	sta     _collision_R
	sta     _collision_L
;
; if (basePlayer->y >= 0xf0)
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	cmp     #$F0
;
; return;
;
	jcs     L0005
;
; up_l_back = upperLeft = basePlayer->x + scroll_x;
;
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	clc
	adc     _scroll_x
	pha
	tya
	adc     _scroll_x+1
	tax
	pla
	sta     _upperLeft
	stx     _upperLeft+1
	sta     _up_l_back
	stx     _up_l_back+1
;
; lowX = upperLeft & 0xff;
;
	lda     _upperLeft
	sta     _lowX
;
; highX = upperLeft >> 8;
;
	lda     _upperLeft+1
	sta     _highX
;
; eject_L = lowX | 0xf0;
;
	lda     _lowX
	ora     #$F0
	sta     _eject_L
;
; lowX = upperLeft & 0xff;
;
	lda     _upperLeft
	sta     _lowX
;
; highX = upperLeft >> 8;
;
	lda     _upperLeft+1
	sta     _highX
;
; lowY = basePlayer->y; // y top
;
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	sta     _lowY
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (collision & COL_ALL)
;
	lda     _collision
	and     #$40
	beq     L0003
;
; ++collision_L;
;
	inc     _collision_L
;
; upperLeft += basePlayer->width;
;
L0003:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     _upperLeft
	sta     _upperLeft
	lda     #$00
	adc     _upperLeft+1
	sta     _upperLeft+1
;
; lowX = upperLeft & 0xff; // low byte x
;
	lda     _upperLeft
	sta     _lowX
;
; highX = upperLeft >> 8;  // high byte x
;
	lda     _upperLeft+1
	sta     _highX
;
; eject_R = (lowX + 1) & 0x0f;
;
	lda     _lowX
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (collision & COL_ALL)
;
	lda     _collision
	and     #$40
	beq     L0005
;
; ++collision_R;
;
	inc     _collision_R
;
; }
;
L0005:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_y (struct Base *basePlayer)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_y: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; collision_U = collision_D = 0;
;
	lda     #$00
	sta     _collision_D
	sta     _collision_U
;
; if (basePlayer->y >= 0xf0)
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	cmp     #$F0
;
; return;
;
	jcs     L0009
;
; up_l_back = upperLeft = basePlayer->x + scroll_x;
;
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	clc
	adc     _scroll_x
	pha
	tya
	adc     _scroll_x+1
	tax
	pla
	sta     _upperLeft
	stx     _upperLeft+1
	sta     _up_l_back
	stx     _up_l_back+1
;
; lowX = upperLeft & 0xff;
;
	lda     _upperLeft
	sta     _lowX
;
; highX = upperLeft >> 8;
;
	lda     _upperLeft+1
	sta     _highX
;
; lowY = basePlayer->y;
;
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	sta     _lowY
;
; eject_U = lowY | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if (L_R_switch)
;
	lda     _L_R_switch
	beq     L0003
;
; lowY += 5; 
;
	lda     #$05
	clc
	adc     _lowY
	sta     _lowY
;
; bg_collision_sub();
;
L0003:	jsr     _bg_collision_sub
;
; if (collision & COL_ALL)
;
	lda     _collision
	and     #$40
	beq     L0004
;
; ++collision_U;
;
	inc     _collision_U
;
; upperLeft += basePlayer->width;
;
L0004:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     _upperLeft
	sta     _upperLeft
	lda     #$00
	adc     _upperLeft+1
	sta     _upperLeft+1
;
; lowX = upperLeft & 0xff;
;
	lda     _upperLeft
	sta     _lowX
;
; highX = upperLeft >> 8;
;
	lda     _upperLeft+1
	sta     _highX
;
; lowY = basePlayer->y + basePlayer->height;
;
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	iny
	lda     (ptr1),y
	sta     sreg
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     sreg
	sta     _lowY
;
; if (L_R_switch)
;
	lda     _L_R_switch
	beq     L000C
;
; lowY -= 2;
;
	lda     _lowY
	sec
	sbc     #$02
	sta     _lowY
;
; eject_D = (lowY + 1) & 0x0f;
;
L000C:	lda     _lowY
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if (lowY >= 0xf0)
;
	lda     _lowY
	cmp     #$F0
;
; return;
;
	bcs     L0009
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (collision & (COL_DOWN | COL_ALL))
;
	lda     _collision
	and     #$C0
	beq     L000D
;
; ++collision_D;
;
	inc     _collision_D
;
; if ((lowY & 0x0f) > 3) //top 3 pixels
;
L000D:	lda     _lowY
	and     #$0F
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L000A
	eor     #$80
L000A:	bpl     L0009
;
; collision_D = 0;  
;
	lda     #$00
	sta     _collision_D
;
; }
;
L0009:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ spr_enemy_collision (struct Sprite *player, struct Sprite *enemy)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spr_enemy_collision: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; set_generic(&genericBase1, player, PLAYER_WIDTH, PLAYER_HEIGHT);
;
	jsr     decsp6
	lda     #<(_genericBase1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_genericBase1)
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     #$09
	jsr     _set_generic
;
; set_generic(&genericBase2, enemy, ENEMY_WIDTH, ENEMY_HEIGHT);
;
	jsr     decsp6
	lda     #<(_genericBase2)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_genericBase2)
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     #$09
	jsr     _set_generic
;
; if (check_collision(&genericBase1, &genericBase2))
;
	lda     #<(_genericBase1)
	ldx     #>(_genericBase1)
	jsr     pushax
	lda     #<(_genericBase2)
	ldx     #>(_genericBase2)
	jsr     _check_collision
	tax
	jeq     L0012
;
; enemy->vel_x = enemy->vel_y = 0;
;
	jsr     pushw0sp
	ldy     #$05
	jsr     pushwysp
	ldx     #$00
	txa
	ldy     #$06
	jsr     staxspidx
	ldy     #$04
	jsr     staxspidx
;
; sfx_play(SFX_HIT, 0);
;
	lda     #$06
	jsr     pusha
	txa
	jsr     _sfx_play
;
; enemy->state = STATE_DEAD;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	tya
	ldy     #$09
	sta     (ptr1),y
;
; HIGH_BYTE(enemy->y) = TURN_OFF;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L0003
	inx
L0003:	sta     ptr1
	stx     ptr1+1
	iny
	lda     #$FF
	sta     (ptr1),y
;
; if (invincible_state)
;
	lda     _invincible_state
	beq     L0005
;
; score = (score > 0) ? score + 100 : 0;
;
	lda     _score
	cmp     #$01
	lda     _score+1
	sbc     #$00
	bvs     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	tax
	bcc     L0009
	lda     _score
	ldx     _score+1
	clc
	adc     #$64
	bcc     L0009
	inx
L0009:	sta     _score
	stx     _score+1
;
; else
;
	jmp     L000A
;
; score = (score > 0) ? score - 50 : 0;
;
L0005:	lda     _score
	cmp     #$01
	lda     _score+1
	sbc     #$00
	bvs     L000B
	eor     #$80
L000B:	asl     a
	lda     #$00
	tax
	bcc     L000E
	lda     _score
	ldx     _score+1
	sec
	sbc     #$32
	bcs     L000E
	dex
L000E:	sta     _score
	stx     _score+1
;
; lives = (lives > 0) ? lives - 1 : 0;
;
	lda     _lives
	beq     L0016
	sec
	sbc     #$01
L0016:	sta     _lives
;
; if (lives <= 0)
;
L000A:	lda     _lives
	bne     L0012
;
; oam_clear();
;
	jsr     _oam_clear
;
; player->state = STATE_DEAD;
;
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$00
	ldy     #$09
	sta     (ptr1),y
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[PLAYER_ANIM_DEAD]);
;
	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	lda     _player_robo_spr_list+20
	ldx     _player_robo_spr_list+20+1
	jsr     _oam_meta_spr
;
; delay(50);
;
	lda     #$32
	jsr     _delay
;
; }
;
L0012:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ set_generic (struct Base *gBase, struct Sprite *player, int width, int height)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_generic: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; gBase->x = HIGH_BYTE(player->x);
;
	ldy     #$07
	lda     (sp),y
	sta     sreg+1
	dey
	lda     (sp),y
	sta     sreg
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sreg),y
;
; gBase->y = HIGH_BYTE(player->y);
;
	ldy     #$07
	lda     (sp),y
	sta     sreg+1
	dey
	lda     (sp),y
	sta     sreg
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L0003
	inx
L0003:	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     (sreg),y
;
; gBase->width = width;
;
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	sta     (ptr1),y
;
; gBase->height = height;
;
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	ldy     #$03
	sta     (ptr1),y
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ spr_collectable_collision (struct Sprite *player, struct Sprite *collectable)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spr_collectable_collision: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; set_generic(&genericBase1, player, PLAYER_WIDTH, PLAYER_HEIGHT);
;
	jsr     decsp6
	lda     #<(_genericBase1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_genericBase1)
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     #$09
	jsr     _set_generic
;
; set_generic(&genericBase2, collectable, COLLECTABLE_WIDTH, COLLECTABLE_HEIGHT);
;
	jsr     decsp6
	lda     #<(_genericBase2)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_genericBase2)
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     #$09
	jsr     _set_generic
;
; if (check_collision(&genericBase1, &genericBase2))
;
	lda     #<(_genericBase1)
	ldx     #>(_genericBase1)
	jsr     pushax
	lda     #<(_genericBase2)
	ldx     #>(_genericBase2)
	jsr     _check_collision
	tax
	jeq     L0006
;
; collectable->state = STATE_DEAD;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	tya
	ldy     #$09
	sta     (ptr1),y
;
; HIGH_BYTE(collectable->y) = TURN_OFF;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L0003
	inx
L0003:	sta     ptr1
	stx     ptr1+1
	iny
	lda     #$FF
	sta     (ptr1),y
;
; switch (collectable->type)
;
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0A
	lda     (ptr1),y
;
; }
;
	beq     L0007
	cmp     #$01
	beq     L000A
	cmp     #$02
	beq     L0009
	jmp     L0006
;
; sfx_play(SFX_COIN, 0);
;
L0007:	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; score += 50;
;
	lda     #$32
	clc
	adc     _score
	sta     _score
	bcc     L0008
	inc     _score+1
;
; coins++;
;
L0008:	inc     _coins
;
; break;
;
	jmp     L0006
;
; sfx_play(SFX_LIFE, 0);
;
L0009:	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; lives++;
;
	inc     _lives
;
; life_timer = LIFE_TIMER_MAX; //Reset life timer.
;
	lda     #$1E
	sta     _life_timer
;
; half_dead_state = FALSE;
;
	lda     #$00
	sta     _half_dead_state
;
; break;
;
	jmp     L0006
;
; sfx_play(SFX_STAR, 0);
;
L000A:	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; stars++;
;
	inc     _stars
;
; score += 30;
;
	lda     #$1E
	clc
	adc     _score
	sta     _score
	bcc     L000B
	inc     _score+1
;
; if (!half_dead_state && lives > 1)
;
L000B:	lda     _half_dead_state
	bne     L000C
	lda     _lives
	cmp     #$02
	bcc     L000C
;
; invincible_state = TRUE;
;
	lda     #$01
	sta     _invincible_state
;
; star_timer = STAR_TIMER_MAX;
;
	lda     #$0F
	sta     _star_timer
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; else
;
	jmp     L0006
;
; sfx_play(SFX_WRONG, 0);
;
L000C:	lda     #$09
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; invincible_state = FALSE;
;
	lda     #$00
	sta     _invincible_state
;
; }
;
L0006:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ enable_bg_collision (struct Sprite *player, int width, int height)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enable_bg_collision: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; set_generic(&genericBase1, player, width, height);
;
	jsr     decsp6
	lda     #<(_genericBase1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_genericBase1)
	sta     (sp),y
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _set_generic
;
; bg_collision(&genericBase1);
;
	lda     #<(_genericBase1)
	ldx     #>(_genericBase1)
	jsr     _bg_collision
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ enable_bg_collision_x (struct Sprite *player, int width, int height)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enable_bg_collision_x: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; set_generic(&genericBase1, player, width, height);
;
	jsr     decsp6
	lda     #<(_genericBase1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_genericBase1)
	sta     (sp),y
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _set_generic
;
; bg_collision_x(&genericBase1);
;
	lda     #<(_genericBase1)
	ldx     #>(_genericBase1)
	jsr     _bg_collision_x
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ enable_bg_collision_y (struct Sprite *player, int width, int height)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enable_bg_collision_y: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; set_generic(&genericBase1, player, width, height);
;
	jsr     decsp6
	lda     #<(_genericBase1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_genericBase1)
	sta     (sp),y
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _set_generic
;
; bg_collision_y(&genericBase1);
;
	lda     #<(_genericBase1)
	ldx     #>(_genericBase1)
	jsr     _bg_collision_y
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_sprite_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_sprite_collision: near

.segment	"CODE"

;
; for (index = 0; index < MAX_ENEMY; ++index)
;
	lda     #$00
	sta     _index
L0006:	lda     _index
	cmp     #$05
	bcs     L0003
;
; spr_enemy_collision(&playerRobo, &enemy_list[index]);
;
	lda     #<(_playerRobo)
	ldx     #>(_playerRobo)
	jsr     pushax
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	tay
	txa
	adc     #>(_enemy_list)
	tax
	tya
	jsr     _spr_enemy_collision
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
	inc     _index
	jmp     L0006
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collectable_sprite_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collectable_sprite_collision: near

.segment	"CODE"

;
; for (index = 0; index < MAX_COLLECTABLES; ++index)
;
	lda     #$00
	sta     _index
L0006:	lda     _index
	cmp     #$05
	bcs     L0003
;
; spr_collectable_collision(&playerRobo, &collectable_list[index]);
;
	lda     #<(_playerRobo)
	ldx     #>(_playerRobo)
	jsr     pushax
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_collectable_list)
	tay
	txa
	adc     #>(_collectable_list)
	tax
	tya
	jsr     _spr_collectable_collision
;
; for (index = 0; index < MAX_COLLECTABLES; ++index)
;
	inc     _index
	jmp     L0006
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; map_coords = (lowX >> 4) + (lowY & 0xf0);
;
	lda     _lowX
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _lowY
	and     #$F0
	clc
	adc     ptr1
	sta     _map_coords
;
; collision = c_map[map_coords];
;
	ldy     _map_coords
	lda     _c_map,y
	sta     _collision
;
; collision = is_solid[collision];
;
	ldy     _collision
	lda     _is_solid,y
	sta     _collision
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_check_low (struct Base basePlayer)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_check_low: near

.segment	"CODE"

;
; {
;
	jsr     pusheax
;
; collision_D = 0;
;
	lda     #$00
	sta     _collision_D
;
; upperLeft = basePlayer.x + scroll_x; //left
;
	tay
	lda     (sp),y
	clc
	adc     _scroll_x
	pha
	tya
	adc     _scroll_x+1
	sta     _upperLeft+1
	pla
	sta     _upperLeft
;
; lowX = upperLeft & 0xff;             //low byte
;
	sta     _lowX
;
; highX = upperLeft >> 8;              //high byte
;
	lda     _upperLeft+1
	sta     _highX
;
; lowY = basePlayer.y + basePlayer.height + 1; // bottom
;
	ldy     #$03
	lda     (sp),y
	clc
	ldy     #$01
	adc     (sp),y
	clc
	adc     #$01
	sta     _lowY
;
; if (lowY >= 0xf0)
;
	cmp     #$F0
;
; return;
;
	bcs     L0006
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (collision & (COL_DOWN | COL_ALL))
;
	lda     _collision
	and     #$C0
	beq     L0004
;
; ++collision_D;
;
	inc     _collision_D
;
; upperLeft += basePlayer.width;
;
L0004:	ldy     #$02
	lda     (sp),y
	clc
	adc     _upperLeft
	sta     _upperLeft
	lda     #$00
	adc     _upperLeft+1
	sta     _upperLeft+1
;
; lowX = upperLeft & 0xff; //low byte
;
	lda     _upperLeft
	sta     _lowX
;
; highX = upperLeft >> 8;  //high byte
;
	lda     _upperLeft+1
	sta     _highX
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (collision & (COL_DOWN | COL_ALL))
;
	lda     _collision
	and     #$C0
	beq     L0009
;
; ++collision_D;
;
	inc     _collision_D
;
; if ((lowY & 0x0f) > 3)
;
L0009:	lda     _lowY
	and     #$0F
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0007
	eor     #$80
L0007:	bpl     L0006
;
; collision_D = 0; // for platforms, only collide with the top 3 pixels
;
	lda     #$00
	sta     _collision_D
;
; }
;
L0006:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ init_player (int x, int y, unsigned char vel_x, unsigned char vel_y, unsigned char direction)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_player: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; playerRobo.x = x;
;
	ldy     #$06
	lda     (sp),y
	sta     _playerRobo+1
	dey
	lda     (sp),y
	sta     _playerRobo
;
; playerRobo.y = y;
;
	dey
	lda     (sp),y
	sta     _playerRobo+2+1
	dey
	lda     (sp),y
	sta     _playerRobo+2
;
; playerRobo.vel_x = vel_x;
;
	dey
	ldx     #$00
	lda     (sp),y
	sta     _playerRobo+4
	stx     _playerRobo+4+1
;
; playerRobo.vel_y = vel_y;
;
	dey
	lda     (sp),y
	sta     _playerRobo+6
	stx     _playerRobo+6+1
;
; playerRobo.direction = direction;
;
	lda     (sp,x)
	sta     _playerRobo+8
;
; playerRobo.state = STATE_ALIVE;
;
	sty     _playerRobo+9
;
; playerRobo.type = -1;
;
	lda     #$FF
	sta     _playerRobo+10
;
; }
;
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ player_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_movement: near

.segment	"CODE"

;
; old_x = playerRobo.x;
;
	lda     _playerRobo+1
	sta     _old_x+1
	lda     _playerRobo
	sta     _old_x
;
; if (NES_PAD1(PAD_LEFT))
;
	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L0053
;
; playerRobo.direction = LEFT;
;
	lda     #$0B
	sta     _playerRobo+8
;
; playerRobo.vel_x -= ACCEL;
;
	lda     _playerRobo+4
	sec
	sbc     #$20
	sta     _playerRobo+4
	bcs     L0003
	dec     _playerRobo+4+1
;
; if (playerRobo.vel_x < -MAX_SPEED)
;
L0003:	lda     _playerRobo+4
	cmp     #$B0
	lda     _playerRobo+4+1
	sbc     #$FD
	bvc     L0005
	eor     #$80
L0005:	jpl     L0013
;
; playerRobo.vel_x = -MAX_SPEED;
;
	ldx     #$FD
	lda     #$B0
;
; else if (NES_PAD1(PAD_RIGHT))
;
	jmp     L0055
L0053:	jsr     _pad_poll
	and     #$01
	beq     L0007
;
; playerRobo.direction = RIGHT;
;
	lda     #$00
	sta     _playerRobo+8
;
; playerRobo.vel_x += ACCEL;
;
	lda     #$20
	clc
	adc     _playerRobo+4
	sta     _playerRobo+4
	bcc     L0008
	inc     _playerRobo+4+1
;
; if (playerRobo.vel_x > MAX_SPEED)
;
L0008:	lda     _playerRobo+4
	cmp     #$51
	lda     _playerRobo+4+1
	sbc     #$02
	bvs     L000A
	eor     #$80
L000A:	bpl     L0013
;
; playerRobo.vel_x = MAX_SPEED;
;
	ldx     #$02
	lda     #$50
;
; else
;
	jmp     L0055
;
; if (playerRobo.vel_x >= 0x100)
;
L0007:	lda     _playerRobo+4
	cmp     #$00
	lda     _playerRobo+4+1
	sbc     #$01
	bvs     L000D
	eor     #$80
L000D:	bpl     L000C
;
; playerRobo.vel_x -= ACCEL;
;
	lda     _playerRobo+4
	sec
	sbc     #$20
	sta     _playerRobo+4
	bcs     L0013
	dec     _playerRobo+4+1
;
; else if (playerRobo.vel_x < -0x100)
;
	jmp     L0013
L000C:	lda     _playerRobo+4
	cmp     #$00
	lda     _playerRobo+4+1
	sbc     #$FF
	bvc     L0011
	eor     #$80
L0011:	asl     a
	lda     #$00
	tax
	bcc     L0055
;
; playerRobo.vel_x += ACCEL;
;
	lda     #$20
	clc
	adc     _playerRobo+4
	sta     _playerRobo+4
	bcc     L0013
	inc     _playerRobo+4+1
;
; else
;
	jmp     L0013
;
; playerRobo.vel_x = 0;
;
L0055:	sta     _playerRobo+4
	stx     _playerRobo+4+1
;
; playerRobo.x += playerRobo.vel_x;
;
L0013:	lda     _playerRobo+4
	clc
	adc     _playerRobo
	sta     _playerRobo
	lda     _playerRobo+4+1
	adc     _playerRobo+1
	sta     _playerRobo+1
;
; L_R_switch = 1; // head and feet collisions
;
	lda     #$01
	sta     _L_R_switch
;
; enable_bg_collision(&playerRobo, PLAYER_WIDTH, PLAYER_HEIGHT);
;
	jsr     decsp4
	lda     #<(_playerRobo)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_playerRobo)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     #$09
	jsr     _enable_bg_collision
;
; if (collision_R && collision_L)
;
	lda     _collision_R
	beq     L0014
	lda     _collision_L
	beq     L0014
;
; playerRobo.x = old_x;
;
	lda     _old_x+1
	sta     _playerRobo+1
	lda     _old_x
	sta     _playerRobo
;
; playerRobo.vel_x = 0;
;
	lda     #$00
	sta     _playerRobo+4
	sta     _playerRobo+4+1
;
; else if (collision_L)
;
	jmp     L001B
L0014:	lda     _collision_L
	beq     L0019
;
; playerRobo.vel_x = 0;
;
	lda     #$00
	sta     _playerRobo+4
	sta     _playerRobo+4+1
;
; HIGH_BYTE(playerRobo.x) = HIGH_BYTE(playerRobo.x) - eject_L;
;
	lda     _playerRobo+1
	sec
	sbc     _eject_L
;
; else if (collision_R)
;
	jmp     L0064
L0019:	lda     _collision_R
	beq     L001B
;
; playerRobo.vel_x = 0;
;
	lda     #$00
	sta     _playerRobo+4
	sta     _playerRobo+4+1
;
; HIGH_BYTE(playerRobo.x) = HIGH_BYTE(playerRobo.x) - eject_R;
;
	lda     _playerRobo+1
	sec
	sbc     _eject_R
L0064:	sta     _playerRobo+1
;
; if (playerRobo.vel_y < 0x300)
;
L001B:	lda     _playerRobo+6
	cmp     #$00
	lda     _playerRobo+6+1
	sbc     #$03
	bvc     L001D
	eor     #$80
L001D:	bpl     L001C
;
; playerRobo.vel_y += GRAVITY;
;
	lda     #$60
	clc
	adc     _playerRobo+6
	sta     _playerRobo+6
	bcc     L001F
	inc     _playerRobo+6+1
;
; else
;
	jmp     L001F
;
; playerRobo.vel_y = 0x300;
;
L001C:	ldx     #$03
	lda     #$00
	sta     _playerRobo+6
	stx     _playerRobo+6+1
;
; playerRobo.y += playerRobo.vel_y;
;
L001F:	lda     _playerRobo+6
	clc
	adc     _playerRobo+2
	sta     _playerRobo+2
	lda     _playerRobo+6+1
	adc     _playerRobo+2+1
	sta     _playerRobo+2+1
;
; L_R_switch = 0;
;
	lda     #$00
	sta     _L_R_switch
;
; genericBase1.x = HIGH_BYTE(playerRobo.x);
;
	lda     _playerRobo+1
	sta     _genericBase1
;
; genericBase1.y = HIGH_BYTE(playerRobo.y);
;
	lda     _playerRobo+3
	sta     _genericBase1+1
;
; bg_collision(&genericBase1);
;
	lda     #<(_genericBase1)
	ldx     #>(_genericBase1)
	jsr     _bg_collision
;
; if (collision_U)
;
	lda     _collision_U
	beq     L0020
;
; HIGH_BYTE(playerRobo.y) = HIGH_BYTE(playerRobo.y) - eject_U;
;
	lda     _playerRobo+3
	sec
	sbc     _eject_U
	sta     _playerRobo+3
;
; else if (collision_D)
;
	jmp     L0065
L0020:	lda     _collision_D
	beq     L0056
;
; HIGH_BYTE(playerRobo.y) = HIGH_BYTE(playerRobo.y) - eject_D;
;
	lda     _playerRobo+3
	sec
	sbc     _eject_D
	sta     _playerRobo+3
;
; playerRobo.y &= 0xff00;
;
	ldx     _playerRobo+2+1
	lda     #$00
	sta     _playerRobo+2
	stx     _playerRobo+2+1
;
; if (playerRobo.vel_y > 0)
;
	lda     _playerRobo+6
	cmp     #$01
	lda     _playerRobo+6+1
	sbc     #$00
	bvs     L0024
	eor     #$80
L0024:	bpl     L0056
;
; playerRobo.vel_y = 0;
;
L0065:	lda     #$00
	sta     _playerRobo+6
	sta     _playerRobo+6+1
;
; genericBase1.y = HIGH_BYTE(playerRobo.y);
;
L0056:	lda     _playerRobo+3
	sta     _genericBase1+1
;
; bg_check_low(genericBase1);
;
	lda     _genericBase1+3
	sta     sreg+1
	lda     _genericBase1+2
	sta     sreg
	ldx     _genericBase1+1
	lda     _genericBase1
	jsr     _bg_check_low
;
; if (collision_D)
;
	lda     _collision_D
	beq     L0057
;
; if (NES_PAD1(PAD_A))
;
	lda     #$00
	jsr     _pad_poll
	and     #$80
	beq     L0057
;
; playerRobo.vel_y = JUMP_VEL; // JUMP
;
	ldx     #$FB
	lda     #$00
	sta     _playerRobo+6
	stx     _playerRobo+6+1
;
; sfx_play(SFX_JUMP, 0);
;
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; player_vel_state = STATE_JUMP_AIR;
;
	lda     #$03
	sta     _player_vel_state
;
; if (lives == 1 && !invincible_state)
;
L0057:	lda     _lives
	cmp     #$01
	bne     L0027
	lda     _invincible_state
	bne     L0027
;
; half_dead_state = TRUE;
;
	lda     #$01
	sta     _half_dead_state
;
; if (half_dead_state && !invincible_state && get_frame_count() % (1 << 5) == 0)
;
L0027:	lda     _half_dead_state
	beq     L005D
	lda     _invincible_state
	bne     L005D
	jsr     _get_frame_count
	and     #$1F
	bne     L005D
;
; blink_life = !blink_life;
;
	lda     _blink_life
	jsr     bnega
	sta     _blink_life
;
; sfx_play(SFX_HALF_DEAD, 0);
;
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; NES_GOTOXY(9, 0);
;
	ldx     #$00
	lda     #$09
	sta     _xText
	stx     _xText+1
	txa
	sta     _yText
	sta     _yText+1
;
; nes_text_hud("%c%c%0.2d ", (blink_life) ? 0x26 : 0x2D, 0x25, life_timer--);
;
	lda     #<(S0008)
	ldx     #>(S0008)
	jsr     pushax
	lda     _blink_life
	beq     L0030
	lda     #$26
	jmp     L0031
L0030:	lda     #$2D
L0031:	jsr     pusha0
	lda     #$25
	jsr     pusha0
	lda     _life_timer
	dec     _life_timer
	jsr     pusha0
	ldy     #$08
	jsr     _nes_text_hud
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; else if (player_vel_state == STATE_JUMP_AIR)
;
	jmp     L0046
L005D:	lda     _player_vel_state
	cmp     #$03
	bne     L005E
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[playerRobo.direction + PLAYER_ANIM_JUMP]);
;
	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	ldx     #$00
	lda     _playerRobo+8
	clc
	adc     #$07
;
; else if (player_vel_state == STATE_JUMP_FALL)
;
	jmp     L0073
L005E:	lda     _player_vel_state
	cmp     #$04
	bne     L0036
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[playerRobo.direction + PLAYER_ANIM_FALL]);
;
	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	ldx     #$00
	lda     _playerRobo+8
	clc
	adc     #$08
	bcc     L0037
	inx
L0037:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_player_robo_spr_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_player_robo_spr_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; if (collision_D)
;
	lda     _collision_D
	jeq     L0046
;
; player_vel_state = STATE_UNDEF;
;
	lda     #$02
	sta     _player_vel_state
;
; else if (playerRobo.vel_x == 0 && !NES_PAD1(PAD_B))
;
	jmp     L0046
L0036:	lda     _playerRobo+4
	ora     _playerRobo+4+1
	bne     L003A
	jsr     _pad_poll
	and     #$40
	bne     L003A
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[playerRobo.direction]);
;
	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	ldx     #$00
	lda     _playerRobo+8
	asl     a
	bcc     L0051
	inx
	clc
L0051:	adc     #<(_player_robo_spr_list)
	sta     ptr1
	txa
;
; else
;
	jmp     L006B
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[playerRobo.direction]);
;
L003A:	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	ldx     #$00
	lda     _playerRobo+8
	asl     a
	bcc     L0052
	inx
	clc
L0052:	adc     #<(_player_robo_spr_list)
	sta     ptr1
	txa
	adc     #>(_player_robo_spr_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; if (get_frame_count() % 4 == 0)
;
	jsr     _get_frame_count
	and     #$03
	bne     L0040
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[playerRobo.direction + 1]);
;
	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	ldx     #$00
	lda     _playerRobo+8
	clc
	adc     #$01
	bcc     L0042
	inx
L0042:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_player_robo_spr_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_player_robo_spr_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; if (get_frame_count() % 7 == 0)
;
L0040:	jsr     _get_frame_count
	jsr     pushax
	lda     #$07
	jsr     tosumoda0
	cpx     #$00
	bne     L0043
	cmp     #$00
	bne     L0043
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[playerRobo.direction + 2]);
;
	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	lda     _playerRobo+8
	clc
	adc     #$02
	bcc     L0045
	inx
L0045:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_player_robo_spr_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_player_robo_spr_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; if (get_frame_count() % 13 == 0)
;
L0043:	jsr     _get_frame_count
	jsr     pushax
	lda     #$0D
	jsr     tosumoda0
	cpx     #$00
	bne     L0046
	cmp     #$00
	bne     L0046
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[playerRobo.direction + 3]);
;
	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	lda     _playerRobo+8
	clc
	adc     #$03
L0073:	bcc     L0048
	inx
L0048:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_player_robo_spr_list)
	sta     ptr1
	lda     tmp1
L006B:	adc     #>(_player_robo_spr_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; if (!collision_D)
;
L0046:	lda     _collision_D
	bne     L0049
;
; player_vel_state = STATE_JUMP_FALL;
;
	lda     #$04
	sta     _player_vel_state
;
; if (life_timer == 0)
;
L0049:	lda     _life_timer
	bne     L004A
;
; lives--;
;
	dec     _lives
;
; half_dead_state = FALSE;
;
	sta     _half_dead_state
;
; }
;
L004A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_enemy (struct Sprite *enemy, int x, int y, int vel_x, int vel_y, unsigned char direction, unsigned char type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_enemy: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; enemy->x = x;
;
	ldy     #$0B
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enemy->y = y;
;
	ldy     #$0B
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enemy->vel_x = vel_x;
;
	ldy     #$0B
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enemy->vel_y = vel_y;
;
	ldy     #$0B
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$06
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enemy->state = STATE_ALIVE;
;
	ldy     #$0B
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$01
	dey
	sta     (ptr1),y
;
; enemy->type = type;
;
	ldy     #$0B
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	ldy     #$0A
	sta     (ptr1),y
;
; enemy->direction = direction;
;
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	ldy     #$08
	sta     (ptr1),y
;
; enemy_list[enemy_index++] = *enemy;
;
	lda     _enemy_index
	inc     _enemy_index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	tay
	txa
	adc     #>(_enemy_list)
	tax
	tya
	jsr     pushax
	ldy     #$0F
	jsr     pushwysp
	ldx     #$00
	lda     #$0B
	jsr     _memcpy
;
; }
;
	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ init_enemy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_enemy: near

.segment	"CODE"

;
; enemy_index = 0;
;
	lda     #$00
	sta     _enemy_index
;
; if (game_level == 1)
;
	lda     _game_level
	cmp     #$01
	jne     L000C
;
; add_enemy(&enemy1, 0x7000, 0x3400, 0x150, 0x0, LEFT, ENEMY_FIRE);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy1)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy1)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$70
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$34
	sta     (sp),y
	lda     #$50
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	tya
	jsr     _add_enemy
;
; add_enemy(&enemy2, 0x9000, 0x8400, 0xEE, 0x0, LEFT, ENEMY_FIRE);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy2)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy2)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$90
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$84
	sta     (sp),y
	lda     #$EE
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	tya
	jsr     _add_enemy
;
; add_enemy(&enemy3, 0x3000, 0xA400, 0x190, 0x0, LEFT, ENEMY_SWARS);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy3)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy3)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$30
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$A4
	sta     (sp),y
	lda     #$90
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	lda     #$02
;
; else if (game_level == 2)
;
	jmp     L000B
L000C:	lda     _game_level
	cmp     #$02
	jne     L000D
;
; add_enemy(&enemy1, 0x7000, 0x3400, 0x250, 0x0, LEFT, ENEMY_GLOUT);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy1)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy1)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$70
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$34
	sta     (sp),y
	lda     #$50
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$02
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	lda     #$03
	jsr     _add_enemy
;
; add_enemy(&enemy2, 0xB000, 0x8400, 0x122, 0x0, LEFT, ENEMY_BEAR);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy2)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy2)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$B0
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$84
	sta     (sp),y
	lda     #$22
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	lda     #$04
	jsr     _add_enemy
;
; add_enemy(&enemy3, 0x5200, 0xA000, 0xD4, 0xE0, UP, ENEMY_BAT);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy3)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy3)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$52
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$A0
	sta     (sp),y
	lda     #$D4
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$E0
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	lda     #$06
;
; else if (game_level == 3)
;
	jmp     L000B
L000D:	lda     _game_level
	cmp     #$03
	jne     L000E
;
; add_enemy(&enemy1, 0x7000, 0x3400, 0x250, 0x0, LEFT, ENEMY_THORN);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy1)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy1)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$70
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$34
	sta     (sp),y
	lda     #$50
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$02
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	lda     #$08
	jsr     _add_enemy
;
; add_enemy(&enemy2, 0xB000, 0x8400, 0x0, 0xE0, DOWN, ENEMY_GLOUT);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy2)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy2)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$B0
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$84
	sta     (sp),y
	lda     #$00
	ldy     #$03
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$E0
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	lda     #$03
	jsr     _add_enemy
;
; add_enemy(&enemy3, 0x5800, 0xA000, 0x0, 0xE0, UP, ENEMY_GORILLA);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy3)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy3)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$58
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$A0
	sta     (sp),y
	lda     #$00
	ldy     #$03
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$E0
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	lda     #$05
;
; else if (game_level == 4)
;
	jmp     L000B
L000E:	lda     _game_level
	cmp     #$04
	jne     L000F
;
; add_enemy(&enemy1, 0x7000, 0x3400, 0x220, 0x0, LEFT, ENEMY_MUSH);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy1)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy1)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$70
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$34
	sta     (sp),y
	lda     #$20
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$02
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	jsr     _add_enemy
;
; add_enemy(&enemy2, 0xB000, 0x8400, 0x0, 0xE0, DOWN, ENEMY_BEAR);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy2)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy2)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$B0
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$84
	sta     (sp),y
	lda     #$00
	ldy     #$03
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$E0
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	lda     #$04
	jsr     _add_enemy
;
; add_enemy(&enemy3, 0x5200, 0xC800, 0x0, 0x170, UP, ENEMY_BAT);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy3)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy3)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$52
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$C8
	sta     (sp),y
	lda     #$00
	ldy     #$03
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$70
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     #$06
;
; else if (game_level == 5)
;
	jmp     L000B
L000F:	lda     _game_level
	cmp     #$05
	jne     L0010
;
; add_enemy(&enemy1, 0x2000, 0x6200, 0x150, 0x0, LEFT, ENEMY_OCTA);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy1)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy1)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$62
	sta     (sp),y
	lda     #$50
	ldy     #$03
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	lda     #$07
	jsr     _add_enemy
;
; add_enemy(&enemy2, 0xB000, 0x8400, 0x0, 0x12C, DOWN, ENEMY_SWARS);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy2)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy2)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$B0
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$84
	sta     (sp),y
	lda     #$00
	ldy     #$03
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$2C
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	tya
	ldy     #$00
	sta     (sp),y
	jsr     _add_enemy
;
; add_enemy(&enemy3, 0x4800, 0x9800, 0x0, 0x110, UP, ENEMY_FIRE);
;
	ldy     #$0B
	jsr     subysp
	lda     #<(_enemy3)
	ldy     #$09
	sta     (sp),y
	iny
	lda     #>(_enemy3)
	sta     (sp),y
	lda     #$00
	ldy     #$07
	sta     (sp),y
	iny
	lda     #$48
	sta     (sp),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	iny
	lda     #$98
	sta     (sp),y
	lda     #$00
	ldy     #$03
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$10
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	ldy     #$00
	sta     (sp),y
	tya
L000B:	jsr     _add_enemy
;
; enemy_item_count = enemy_index;
;
L0010:	lda     _enemy_index
	sta     _enemy_item_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_movement_x (struct Sprite *enemyPlayer, unsigned char direction, int speed_x)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_movement_x: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; enemy_direction = (enemyPlayer->direction == enemy_direction) ? enemy_direction : enemyPlayer->direction;
;
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$08
	lda     (ptr1),y
	cmp     _enemy_direction
	bne     L0002
	lda     _enemy_direction
	jmp     L0014
L0002:	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$08
	lda     (ptr1),y
L0014:	sta     _enemy_direction
;
; if (enemy_direction == RIGHT)
;
	lda     _enemy_direction
	bne     L0015
;
; enemyPlayer->x += enemyPlayer->vel_x;
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     ptr2
	stx     ptr2+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     sreg
	stx     sreg+1
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$00
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
;
; else if (enemy_direction == LEFT)
;
	jmp     L0006
L0015:	lda     _enemy_direction
	cmp     #$0B
	bne     L0006
;
; enemyPlayer->x -= enemyPlayer->vel_x;
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldy     #$08
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	ldy     #$00
	jsr     staxspidx
;
; if (direction == LEFT || direction == RIGHT)
;
L0006:	ldy     #$02
	lda     (sp),y
	cmp     #$0B
	beq     L0016
	lda     (sp),y
	bne     L0007
;
; enemyPlayer->vel_x = speed_x;
;
L0016:	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enable_bg_collision_x(enemyPlayer, ENEMY_WIDTH, ENEMY_HEIGHT);
;
L0007:	jsr     decsp4
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     #$09
	jsr     _enable_bg_collision_x
;
; if (collision_L)
;
	lda     _collision_L
	beq     L000A
;
; enemy_direction = RIGHT;
;
	lda     #$00
	sta     _enemy_direction
;
; HIGH_BYTE(enemyPlayer->x) = HIGH_BYTE(enemyPlayer->x) - eject_L;
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$01
	bcc     L000B
	inx
L000B:	sta     sreg
	stx     sreg+1
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	sbc     _eject_L
;
; else if (collision_R)
;
	jmp     L0019
L000A:	lda     _collision_R
	beq     L001A
;
; enemy_direction = LEFT;
;
	lda     #$0B
	sta     _enemy_direction
;
; HIGH_BYTE(enemyPlayer->x) = HIGH_BYTE(enemyPlayer->x) - eject_R;
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$01
	bcc     L000F
	inx
L000F:	sta     sreg
	stx     sreg+1
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	sbc     _eject_R
L0019:	dey
	sta     (sreg),y
;
; L_R_switch = 0;
;
	tya
L001A:	sta     _L_R_switch
;
; enemyPlayer->direction = (enemyPlayer->direction != enemy_direction) ? enemy_direction : enemyPlayer->direction;
;
	ldy     #$04
	lda     (sp),y
	sta     sreg+1
	dey
	lda     (sp),y
	sta     sreg
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$08
	lda     (ptr1),y
	cmp     _enemy_direction
	beq     L0011
	lda     _enemy_direction
	jmp     L0018
L0011:	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$08
	lda     (ptr1),y
L0018:	sta     (sreg),y
;
; }
;
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_movement_y (struct Sprite *enemyPlayer, unsigned char direction, int speed_y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_movement_y: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; enemy_direction = (enemyPlayer->direction == enemy_direction) ? enemy_direction : enemyPlayer->direction;
;
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$08
	lda     (ptr1),y
	cmp     _enemy_direction
	bne     L0002
	lda     _enemy_direction
	jmp     L0019
L0002:	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$08
	lda     (ptr1),y
L0019:	sta     _enemy_direction
;
; if (enemy_direction == UP)
;
	cmp     #$01
	bne     L001A
;
; enemyPlayer->y -= enemyPlayer->vel_y;
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldy     #$08
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	ldy     #$02
	jsr     staxspidx
;
; else if (enemy_direction == DOWN)
;
	jmp     L001B
L001A:	lda     _enemy_direction
	cmp     #$02
	bne     L0006
;
; enemyPlayer->y += enemyPlayer->vel_y;
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     ptr2
	stx     ptr2+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     sreg
	stx     sreg+1
	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$02
	sta     (ptr2),y
	iny
	txa
	sta     (ptr2),y
;
; if (direction == UP || direction == DOWN)
;
L0006:	ldy     #$02
L001B:	lda     (sp),y
	cmp     #$01
	beq     L001D
	cmp     #$02
	bne     L0007
;
; enemyPlayer->vel_y = speed_y;
;
L001D:	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$06
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enable_bg_collision_y(enemyPlayer, ENEMY_WIDTH, ENEMY_HEIGHT);
;
L0007:	jsr     decsp4
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     #$09
	jsr     _enable_bg_collision_y
;
; if (collision_U)
;
	lda     _collision_U
	beq     L000A
;
; enemy_direction = DOWN;
;
	lda     #$02
	sta     _enemy_direction
;
; HIGH_BYTE(enemyPlayer->y) = HIGH_BYTE(enemyPlayer->y) - eject_U;
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L0017
	inx
	clc
L0017:	adc     #$01
	bcc     L000C
	inx
L000C:	sta     sreg
	stx     sreg+1
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L000D
	inx
L000D:	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	sbc     _eject_U
	dey
;
; else if (collision_D)
;
	jmp     L0021
L000A:	lda     _collision_D
	beq     L0022
;
; enemy_direction = UP;
;
	lda     #$01
	sta     _enemy_direction
;
; HIGH_BYTE(enemyPlayer->y) = HIGH_BYTE(enemyPlayer->y) - eject_D;
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L0018
	inx
	clc
L0018:	adc     #$01
	bcc     L0012
	inx
L0012:	sta     sreg
	stx     sreg+1
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L0013
	inx
L0013:	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	sbc     _eject_D
	dey
	sta     (sreg),y
;
; enemyPlayer->y &= 0xff00;
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     #$00
	sta     (sreg),y
	iny
	txa
L0021:	sta     (sreg),y
;
; L_R_switch = 0;
;
	lda     #$00
L0022:	sta     _L_R_switch
;
; enemyPlayer->direction = (enemyPlayer->direction != enemy_direction) ? enemy_direction : enemyPlayer->direction;
;
	ldy     #$04
	lda     (sp),y
	sta     sreg+1
	dey
	lda     (sp),y
	sta     sreg
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$08
	lda     (ptr1),y
	cmp     _enemy_direction
	beq     L0015
	lda     _enemy_direction
	jmp     L0020
L0015:	ldy     #$04
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$08
	lda     (ptr1),y
L0020:	sta     (sreg),y
;
; }
;
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_movement: near

.segment	"CODE"

;
; for (index = 0; index < MAX_ENEMY; ++index)
;
	lda     #$00
	sta     _index
L000D:	lda     _index
	cmp     #$05
	bcc     L0013
;
; }
;
	rts
;
; if (enemy_list[index].direction == LEFT || enemy_list[index].direction == RIGHT)
;
L0013:	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$08
	lda     (ptr1),y
	cmp     #$0B
	beq     L000E
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$08
	lda     (ptr1),y
	beq     L000E
	jmp     L000F
;
; enemy_movement_x(enemy_list + index, enemy_list[index].direction, enemy_list[index].vel_x);
;
L000E:	jsr     decsp3
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	tay
	txa
	adc     #>(_enemy_list)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$08
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _enemy_movement_x
;
; else if (enemy_list[index].direction == UP || enemy_list[index].direction == DOWN)
;
	jmp     L0012
L000F:	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$08
	lda     (ptr1),y
	cmp     #$01
	beq     L0011
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$08
	lda     (ptr1),y
	cmp     #$02
	bne     L0012
;
; enemy_movement_y(enemy_list + index, enemy_list[index].direction, enemy_list[index].vel_y);
;
L0011:	jsr     decsp3
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	tay
	txa
	adc     #>(_enemy_list)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$08
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _enemy_movement_y
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
L0012:	inc     _index
	jmp     L000D

.endproc

; ---------------------------------------------------------------
; void __near__ add_collectable (struct Sprite *item, int x, int y, unsigned char type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_collectable: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; item->x = x;
;
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; item->y = y;
;
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	iny
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; item->state = STATE_ALIVE;
;
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$01
	ldy     #$09
	sta     (ptr1),y
;
; item->type = type;
;
	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	ldy     #$0A
	sta     (ptr1),y
;
; collectable_list[collectable_index++] = *item;
;
	lda     _collectable_index
	inc     _collectable_index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_collectable_list)
	tay
	txa
	adc     #>(_collectable_list)
	tax
	tya
	jsr     pushax
	ldy     #$0A
	jsr     pushwysp
	ldx     #$00
	lda     #$0B
	jsr     _memcpy
;
; }
;
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ init_collectables (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_collectables: near

.segment	"CODE"

;
; collectable_index = 0;
;
	lda     #$00
	sta     _collectable_index
;
; if (game_level == 1)
;
	lda     _game_level
	cmp     #$01
	jne     L000C
;
; add_collectable(&coin1, 0x2000, 0x2200, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin2, 0x1800, 0x5200, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin2)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin2)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$18
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$52
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin3, 0x1200, 0x9200, COLLECTABLE_STAR);
;
	jsr     decsp6
	lda     #<(_coin3)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin3)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$12
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$92
	sta     (sp),y
	tya
	jsr     _add_collectable
;
; add_collectable(&coin4, 0x5000, 0x9200, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin4)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin4)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$50
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$92
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin5, -0x1900, 0x1900, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin5)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin5)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$E7
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$19
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; max_coins = 4;
;
	lda     #$04
	sta     _max_coins
;
; else if (game_level == 2)
;
	jmp     L0010
L000C:	lda     _game_level
	cmp     #$02
	jne     L000D
;
; add_collectable(&coin1, 0x2000, 0x2000, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin2, 0x1800, 0x5200, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin2)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin2)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$18
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$52
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin3, -0x1600, 0x7200, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin3)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin3)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$EA
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$72
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&life1, 0x4000, 0x9200, COLLECTABLE_STAR);
;
	jsr     decsp6
	lda     #<(_life1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_life1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$40
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$92
	sta     (sp),y
	tya
	jsr     _add_collectable
;
; add_collectable(&life2, -0x1900, 0x1900, COLLECTABLE_LIFE);
;
	jsr     decsp6
	lda     #<(_life2)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_life2)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$E7
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$19
	sta     (sp),y
	lda     #$02
	jsr     _add_collectable
;
; max_coins = 3, max_lives = 2;
;
	lda     #$03
	sta     _max_coins
	lda     #$02
	sta     _max_lives
;
; else if (game_level == 3)
;
	jmp     L0010
L000D:	lda     _game_level
	cmp     #$03
	jne     L000E
;
; add_collectable(&coin1, 0x2000, 0x1500, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$15
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin2, 0x1800, 0x5200, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin2)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin2)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$18
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$52
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin3, -0x1600, 0x7200, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin3)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin3)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$EA
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$72
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&life1, 0x4500, 0x9200, COLLECTABLE_LIFE);
;
	jsr     decsp6
	lda     #<(_life1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_life1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$45
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$92
	sta     (sp),y
	lda     #$02
	jsr     _add_collectable
;
; add_collectable(&star1, -0x2F00, 0xD400, COLLECTABLE_STAR);
;
	jsr     decsp6
	lda     #<(_star1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_star1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$D1
;
; else if (game_level == 4)
;
	jmp     L001D
L000E:	lda     _game_level
	cmp     #$04
	jne     L000F
;
; add_collectable(&coin1, 0x2000, 0x1500, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$15
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin2, 0x1800, 0x4700, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin2)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin2)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$18
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$47
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin3, 0x7000, 0x3700, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin3)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin3)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$70
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$37
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&life1, -0x1600, 0x7200, COLLECTABLE_LIFE);
;
	jsr     decsp6
	lda     #<(_life1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_life1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$EA
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$72
	sta     (sp),y
	lda     #$02
	jsr     _add_collectable
;
; add_collectable(&star1, 0x3F00, 0xD400, COLLECTABLE_STAR);
;
	jsr     decsp6
	lda     #<(_star1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_star1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$3F
;
; else if (game_level == 5)
;
	jmp     L001D
L000F:	lda     _game_level
	cmp     #$05
	jne     L0010
;
; add_collectable(&coin1, 0x3F00, 0xD400, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$3F
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$D4
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin2, 0x1800, 0x4700, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin2)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin2)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$18
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$47
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&coin3, 0x5000, 0x3700, COLLECTABLE_COIN);
;
	jsr     decsp6
	lda     #<(_coin3)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_coin3)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$50
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$37
	sta     (sp),y
	lda     #$00
	jsr     _add_collectable
;
; add_collectable(&life1, -0x1600, 0x6800, COLLECTABLE_LIFE);
;
	jsr     decsp6
	lda     #<(_life1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_life1)
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$EA
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$68
	sta     (sp),y
	lda     #$02
	jsr     _add_collectable
;
; add_collectable(&star1, 0x99A0, 0xD400, COLLECTABLE_STAR);
;
	jsr     decsp6
	lda     #<(_star1)
	ldy     #$04
	sta     (sp),y
	iny
	lda     #>(_star1)
	sta     (sp),y
	lda     #$A0
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$99
L001D:	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	iny
	lda     #$D4
	sta     (sp),y
	tya
	jsr     _add_collectable
;
; max_coins = 3, max_lives = 1, max_stars = 1;
;
	lda     #$03
	sta     _max_coins
	lda     #$01
	sta     _max_lives
	sta     _max_stars
;
; collectables_item_count = collectable_index;
;
L0010:	lda     _collectable_index
	sta     _collectables_item_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ reset_collectables (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_collectables: near

.segment	"CODE"

;
; lives = old_lives = 3;
;
	lda     #$03
	sta     _old_lives
	sta     _lives
;
; score = old_score = total_score = 0;
;
	lda     #$00
	sta     _total_score
	sta     _total_score+1
	sta     _old_score
	sta     _old_score+1
	sta     _score
	sta     _score+1
;
; stars = old_stars = 0;
;
	sta     _old_stars
	sta     _stars
;
; coins = old_coins = total_coins = 0;
;
	sta     _total_coins
	sta     _old_coins
	sta     _coins
;
; game_level = 1;
;
	lda     #$01
	sta     _game_level
;
; life_timer = LIFE_TIMER_MAX;
;
	lda     #$1E
	sta     _life_timer
;
; star_timer = STAR_TIMER_MAX;
;
	lda     #$0F
	sta     _star_timer
;
; invincible_state = half_dead_state = FALSE;
;
	lda     #$00
	sta     _half_dead_state
	sta     _invincible_state
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_invincible_state (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_invincible_state: near

.segment	"CODE"

;
; if (star_timer == 0)
;
	lda     _star_timer
	bne     L0002
;
; star_timer = STAR_TIMER_MAX;
;
	lda     #$0F
	sta     _star_timer
;
; invincible_state = FALSE;
;
	lda     #$00
	sta     _invincible_state
;
; stars--;
;
	dec     _stars
;
; music_pause(FALSE);
;
	jsr     _music_pause
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; pal_spr(palette_spr);
;
	lda     #<(_palette_spr)
	ldx     #>(_palette_spr)
	jmp     _pal_spr
;
; if (invincible_state && !half_dead_state && get_frame_count() % 2 == 0)
;
L0002:	lda     _invincible_state
	beq     L0004
	lda     _half_dead_state
	bne     L0004
	jsr     _get_frame_count
	and     #$01
	bne     L0004
;
; if (blink_cycle == 0)
;
	lda     _blink_cycle
	bne     L001A
;
; pal_col(17, NES_COLOR_CYAN_BLUE);
;
	lda     #$11
	jsr     pusha
	jsr     _pal_col
;
; pal_col(18, NES_COLOR_YELLOW);
;
	lda     #$12
	jsr     pusha
	lda     #$26
;
; else if (blink_cycle == 1)
;
	jmp     L0018
L001A:	lda     _blink_cycle
	cmp     #$01
	bne     L001B
;
; pal_col(17, NES_COLOR_PALE_ORANGE);
;
	lda     #$11
	jsr     pusha
	lda     #$36
;
; else if (blink_cycle == 2)
;
	jmp     L0025
L001B:	lda     _blink_cycle
	cmp     #$02
	bne     L001C
;
; pal_col(17, NES_COLOR_AQUA);
;
	lda     #$11
	jsr     pusha
	lda     #$2A
L0025:	jsr     _pal_col
;
; pal_col(18, NES_COLOR_LIGHT_BLUE);
;
	lda     #$12
	jsr     pusha
	lda     #$20
L0018:	jsr     _pal_col
;
; blink_cycle = (blink_cycle > 2) ? 0 : (blink_cycle+1);
;
L001C:	lda     _blink_cycle
	cmp     #$03
	bcc     L001D
	lda     #$00
	jmp     L001E
L001D:	lda     _blink_cycle
	clc
	adc     #$01
L001E:	sta     _blink_cycle
;
; if (invincible_state && !half_dead_state && get_frame_count() % (1 << 5) == 0)
;
L0004:	lda     _invincible_state
	beq     L0020
	lda     _half_dead_state
	bne     L0020
	jsr     _get_frame_count
	and     #$1F
	beq     L0021
L0020:	rts
;
; blink_life = !blink_life;
;
L0021:	lda     _blink_life
	jsr     bnega
	sta     _blink_life
;
; music_pause(TRUE);
;
	lda     #$01
	jsr     _music_pause
;
; sfx_play(SFX_STAR, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; NES_GOTOXY(16, 0);
;
	ldx     #$00
	lda     #$10
	sta     _xText
	stx     _xText+1
	txa
	sta     _yText
	sta     _yText+1
;
; nes_text_hud("%c%c%0.2d ", (blink_life) ? 0x20 : 0x21, 0x25, star_timer--);
;
	lda     #<(S0009)
	ldx     #>(S0009)
	jsr     pushax
	lda     _blink_life
	beq     L0016
	lda     #$20
	jmp     L0017
L0016:	lda     #$21
L0017:	jsr     pusha0
	lda     #$25
	jsr     pusha0
	lda     _star_timer
	dec     _star_timer
	jsr     pusha0
	ldy     #$08
	jsr     _nes_text_hud
;
; nes_hud_update();
;
	jmp     _nes_hud_update

.endproc

; ---------------------------------------------------------------
; void __near__ load_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level: near

.segment	"CODE"

;
; set_data_pointer(level_list[game_level-1]);
;
	jsr     decsp2
	ldx     #$00
	lda     _game_level
	sec
	sbc     #$01
	bcs     L0002
	dex
L0002:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_level_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles_bg);
;
	lda     #<(_metatiles_bg)
	ldx     #>(_metatiles_bg)
	jsr     _set_mt_pointer
;
; for (y = 0;; y+= 0x20) //0x20 = 32 (4 x 8 metatiles).
;
	lda     #$00
	tay
L0010:	sta     (sp),y
;
; for (x = 0; ;x += 0x20)
;
	tya
	iny
L000F:	sta     (sp),y
;
; clear_vram_buffer();                                      
;
	jsr     _clear_vram_buffer
;
; buffer_4_mt(get_ppu_addr(0, x, y), (y & 0xf0) + (x >> 4)); 
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	jsr     _get_ppu_addr
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	and     #$F0
	sta     ptr1
	iny
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	jsr     _buffer_4_mt
;
; flush_vram_update_nmi();
;
	jsr     _flush_vram_update_nmi
;
; if (x == SCREEN_V - 16)
;
	ldy     #$01
	lda     (sp),y
	cmp     #$E0
;
; break;
;
	beq     L0008
;
; for (x = 0; ;x += 0x20)
;
	clc
	lda     #$20
	adc     (sp),y
	jmp     L000F
;
; if (y == SCREEN_V - 16)
;
L0008:	dey
	lda     (sp),y
	cmp     #$E0
;
; break;
;
	beq     L0011
;
; for (y = 0;; y+= 0x20) //0x20 = 32 (4 x 8 metatiles).
;
	clc
	lda     #$20
	adc     (sp),y
	jmp     L0010
;
; music_play(game_level % 2);
;
L0011:	lda     _game_level
	and     #$01
	jsr     _music_play
;
; memcpy(c_map,level_list[game_level-1], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _game_level
	sec
	sbc     #$01
	bcs     L000D
	dex
L000D:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_level_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; for (index = 0; index < collectables_item_count; ++index)
;
	lda     #$00
	sta     _index
L0010:	lda     _index
	cmp     _collectables_item_count
	jcs     L0011
;
; oam_meta_spr(HIGH_BYTE(collectable_list[index].x), HIGH_BYTE(collectable_list[index].y), collectables_spr_list[collectable_list[index].type]);
;
	jsr     decsp2
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_collectable_list)
	sta     ptr1
	txa
	adc     #>(_collectable_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     (sp),y
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_collectable_list)
	tay
	txa
	adc     #>(_collectable_list)
	tax
	tya
	clc
	adc     #$02
	bcc     L0007
	inx
L0007:	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_collectable_list)
	sta     ptr1
	txa
	adc     #>(_collectable_list)
	sta     ptr1+1
	ldy     #$0A
	ldx     #$00
	lda     (ptr1),y
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_collectables_spr_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_collectables_spr_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; for (index = 0; index < collectables_item_count; ++index)
;
	inc     _index
	jmp     L0010
;
; for (index = 0; index < enemy_item_count; ++index)
;
L0011:	lda     #$00
	sta     _index
L0012:	lda     _index
	cmp     _enemy_item_count
	bcc     L0013
;
; }
;
	rts
;
; oam_meta_spr(HIGH_BYTE(enemy_list[index].x), HIGH_BYTE(enemy_list[index].y), enemy_spr_list[enemy_list[index].type]);
;
L0013:	jsr     decsp2
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     (sp),y
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	tay
	txa
	adc     #>(_enemy_list)
	tax
	tya
	clc
	adc     #$02
	bcc     L000E
	inx
L000E:	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     _index
	jsr     pusha0
	lda     #$0B
	jsr     tosmula0
	clc
	adc     #<(_enemy_list)
	sta     ptr1
	txa
	adc     #>(_enemy_list)
	sta     ptr1+1
	ldy     #$0A
	ldx     #$00
	lda     (ptr1),y
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_spr_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_spr_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; for (index = 0; index < enemy_item_count; ++index)
;
	inc     _index
	jmp     L0012

.endproc

; ---------------------------------------------------------------
; void __near__ print_hud (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_hud: near

.segment	"CODE"

;
; NES_GOTOXY(0, 0);
;
	lda     #$00
	sta     _xText
	sta     _xText+1
	sta     _yText
	sta     _yText+1
;
; nes_text_hud("%c%c%0.2d%c%d    %c%c%0.2d    %c%c%0.2d    %c%c%0.5d\n", 0x6D, 0x25, coins, 0x23, max_coins, 0x2D, 0x25, lives, 0x21, 0x25, stars, 0x22, 0x25, score);
;
	lda     #<(S0016)
	ldx     #>(S0016)
	jsr     pushax
	lda     #$6D
	jsr     pusha0
	lda     #$25
	jsr     pusha0
	lda     _coins
	jsr     pusha0
	lda     #$23
	jsr     pusha0
	lda     _max_coins
	jsr     pusha0
	lda     #$2D
	jsr     pusha0
	lda     #$25
	jsr     pusha0
	lda     _lives
	jsr     pusha0
	lda     #$21
	jsr     pusha0
	lda     #$25
	jsr     pusha0
	lda     _stars
	jsr     pusha0
	lda     #$22
	jsr     pusha0
	lda     #$25
	jsr     pusha0
	lda     _score
	ldx     _score+1
	jsr     pushax
	ldy     #$1E
	jsr     _nes_text_hud
;
; nes_text_hud("%c", 0x7D);
;
	lda     #<(S0017)
	ldx     #>(S0017)
	jsr     pushax
	lda     #$7D
	jsr     pusha0
	ldy     #$04
	jsr     _nes_text_hud
;
; nes_hud_update();
;
	jmp     _nes_hud_update

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palette_title);
;
	lda     #<(_palette_title)
	ldx     #>(_palette_title)
	jsr     _pal_bg
;
; pal_spr(palette_spr);
;
	lda     #<(_palette_spr)
	ldx     #>(_palette_spr)
	jsr     _pal_spr
;
; NES_BANK_BG_1;  //First set for background.
;
	lda     #$00
	jsr     _bank_bg
;
; NES_BANK_SPR_2; //Second set for sprites.
;
	lda     #$01
	jsr     _bank_spr
;
; NES_SPR_SZ_8PX_8PX; // 8x8 Sprites.
;
	lda     #$00
	jsr     _oam_size
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; nes_show_region_error(REGION_NTSC);
;
	lda     #$00
	jsr     _nes_show_region_error
;
; nes_load_title(game_title, NAMETABLE_A);
;
	lda     #<(_game_title)
	ldx     #>(_game_title)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _nes_load_title
;
; music_play(SONG_TITLE);
;
	lda     #$00
	jsr     _music_play
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while (game_mode == MODE_TITLE)
;
	jmp     L0043
;
; ppu_wait_nmi();
;
L0005:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
L0008:	jsr     _ppu_wait_nmi
;
; nes_fade_transition_fg();
;
	jsr     _nes_fade_transition_fg
;
; if (get_frame_count() % 12 == 0)
;
	jsr     _get_frame_count
	jsr     pushax
	lda     #$0C
	jsr     tosumoda0
	cpx     #$00
	bne     L000B
	cmp     #$00
	bne     L000B
;
; menu_select = !menu_select;
;
	lda     _menu_select
	jsr     bnega
	sta     _menu_select
;
; if (menu_select)
;
L000B:	lda     _menu_select
	beq     L000D
;
; NES_GOTOXY(13, 18);
;
	ldx     #$00
	lda     #$0D
	sta     _xText
	stx     _xText+1
	lda     #$12
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("%c%c", 0x71, 0x72);
;
	lda     #<(S000A)
	ldx     #>(S000A)
	jsr     pushax
	lda     #$71
	jsr     pusha0
	lda     #$72
	jsr     pusha0
	ldy     #$06
	jsr     _nes_text_hud
;
; NES_GOTOXY(13, 20);
;
	ldx     #$00
	lda     #$0D
	sta     _xText
	stx     _xText+1
	lda     #$14
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("%c%c", 0x20, 0x20);
;
	lda     #<(S000B)
	ldx     #>(S000B)
	jsr     pushax
	lda     #$20
	jsr     pusha0
	jsr     pusha0
	ldy     #$06
	jsr     _nes_text_hud
;
; game_mode = MODE_START;
;
	lda     #$01
;
; else
;
	jmp     L003F
;
; NES_GOTOXY(13, 18);
;
L000D:	tax
	lda     #$0D
	sta     _xText
	stx     _xText+1
	lda     #$12
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("%c%c", 0x20, 0x20);
;
	lda     #<(S000C)
	ldx     #>(S000C)
	jsr     pushax
	lda     #$20
	jsr     pusha0
	jsr     pusha0
	ldy     #$06
	jsr     _nes_text_hud
;
; NES_GOTOXY(13, 20);
;
	ldx     #$00
	lda     #$0D
	sta     _xText
	stx     _xText+1
	lda     #$14
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("%c%c", 0x71, 0x72);
;
	lda     #<(S000D)
	ldx     #>(S000D)
	jsr     pushax
	lda     #$71
	jsr     pusha0
	lda     #$72
	jsr     pusha0
	ldy     #$06
	jsr     _nes_text_hud
;
; game_mode = MODE_HELP;
;
	lda     #$02
L003F:	sta     _game_mode
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; if (get_frame_count() % 12 == 0)
;
	jsr     _get_frame_count
	jsr     pushax
	lda     #$0C
	jsr     tosumoda0
	cpx     #$00
	bne     L000F
	cmp     #$00
	bne     L000F
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; if (NES_PAD1(PAD_START))
;
L000F:	lda     #$00
	jsr     _pad_poll
	and     #$10
	jeq     L0008
;
; sfx_play(SFX_START, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; nes_exit_cleanup();
;
	jsr     _nes_exit_cleanup
;
; if (game_mode == MODE_START)
;
	lda     _game_mode
	cmp     #$01
	bne     L0042
;
; sfx_play(SFX_LIFE, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; delay(50);
;
	lda     #$32
	jsr     _delay
;
; nes_fade_out();
;
	jsr     _nes_fade_out
;
; ppu_off();
;
	jsr     _ppu_off
;
; load_level();
;
	jsr     _load_level
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; init_player(0x2FD0, 0xC200, 10, 8, LEFT);
;
	jsr     decsp6
	lda     #$D0
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$2F
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$C2
	sta     (sp),y
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$0B
	jsr     _init_player
;
; init_enemy();
;
	jsr     _init_enemy
;
; reset_collectables();
;
	jsr     _reset_collectables
;
; init_collectables();
;
	jsr     _init_collectables
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; pal_bg(palette_bg1);
;
	lda     #<(_palette_bg1)
	ldx     #>(_palette_bg1)
	jsr     _pal_bg
;
; pal_spr(palette_spr);
;
	lda     #<(_palette_spr)
	ldx     #>(_palette_spr)
	jsr     _pal_spr
;
; print_hud();
;
	jsr     _print_hud
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; nes_fade_in();
;
	jsr     _nes_fade_in
;
; game_mode = MODE_GAME;
;
	lda     #$03
	sta     _game_mode
;
; else if (game_mode == MODE_HELP)
;
	jmp     L0043
L0042:	lda     _game_mode
	cmp     #$02
	bne     L0043
;
; nes_fade_out();
;
	jsr     _nes_fade_out
;
; oam_clear();
;
	jsr     _oam_clear
;
; nes_clear_nametable(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _nes_clear_nametable
;
; nes_exit_cleanup();
;
	jsr     _nes_exit_cleanup
;
; pal_spr(palette_title);
;
	lda     #<(_palette_title)
	ldx     #>(_palette_title)
	jsr     _pal_spr
;
; nes_load_title(game_help_title, NAMETABLE_A);
;
	lda     #<(_game_help_title)
	ldx     #>(_game_help_title)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _nes_load_title
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; nes_fade_in();
;
	jsr     _nes_fade_in
;
; while (game_mode == MODE_TITLE)
;
L0043:	lda     _game_mode
	jeq     L0005
;
; while (game_mode == MODE_GAME)
;
	jmp     L004F
;
; ppu_wait_nmi();
;
L0015:	jsr     _ppu_wait_nmi
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; oam_clear();
;
	jsr     _oam_clear
;
; player_movement();
;
	jsr     _player_movement
;
; enemy_movement();
;
	jsr     _enemy_movement
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; check_invincible_state();
;
	jsr     _check_invincible_state
;
; enemy_sprite_collision();
;
	jsr     _enemy_sprite_collision
;
; collectable_sprite_collision();
;
	jsr     _collectable_sprite_collision
;
; if (old_score != score || old_lives != lives || old_stars != stars || old_coins != coins)
;
	lda     _score
	ldx     _score+1
	cpx     _old_score+1
	bne     L0019
	cmp     _old_score
	bne     L0019
	ldx     #$00
	lda     _old_lives
	cmp     _lives
	bne     L0044
	lda     _old_stars
	cmp     _stars
	bne     L0044
	lda     _old_coins
	cmp     _coins
	bne     L0044
	jmp     L0053
L0019:	ldx     #$00
;
; if (!half_dead_state && !invincible_state)
;
L0044:	lda     _half_dead_state
	bne     L001B
	lda     _invincible_state
	bne     L001B
	lda     #$01
;
; print_hud();
;
	jsr     _print_hud
;
; old_score = score;
;
L001B:	lda     _score+1
	sta     _old_score+1
	lda     _score
	sta     _old_score
;
; old_lives = lives;
;
	lda     _lives
	sta     _old_lives
;
; old_stars = stars;
;
	lda     _stars
	sta     _old_stars
;
; old_coins = coins;
;
	lda     _coins
	sta     _old_coins
;
; if(NES_PAD1(PAD_B)){coins = max_coins; score = max_coins * 50;}    
;
L0053:	lda     #$00
	jsr     _pad_poll
	and     #$40
	beq     L0048
	lda     _max_coins
	sta     _coins
	lda     _max_coins
	jsr     pusha0
	lda     #$32
	jsr     tosumula0
	sta     _score
	stx     _score+1
;
; if (coins == max_coins && score > 0)
;
L0048:	lda     _coins
	cmp     _max_coins
	jne     L004C
	lda     _score
	cmp     #$01
	lda     _score+1
	sbc     #$00
	bvs     L0022
	eor     #$80
L0022:	jpl     L004C
;
; music_pause(TRUE);
;
	lda     #$01
	jsr     _music_pause
;
; sfx_play(SFX_STAR, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[PLAYER_ANIM_VICTORY]);
;
	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	lda     _player_robo_spr_list+18
	ldx     _player_robo_spr_list+18+1
	jsr     _oam_meta_spr
;
; delay(70);
;
	lda     #$46
	jsr     _delay
;
; nes_clear_nametable(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _nes_clear_nametable
;
; nes_exit_cleanup();
;
	jsr     _nes_exit_cleanup
;
; nes_fade_out();
;
	jsr     _nes_fade_out
;
; nes_fade_in();
;
	jsr     _nes_fade_in
;
; total_coins += coins;        //Add up level coins
;
	lda     _coins
	clc
	adc     _total_coins
	sta     _total_coins
;
; total_score += score;        //Add up level score
;
	lda     _score
	clc
	adc     _total_score
	sta     _total_score
	lda     _score+1
	adc     _total_score+1
	sta     _total_score+1
;
; life_timer = LIFE_TIMER_MAX; //Reset life timer.
;
	lda     #$1E
	sta     _life_timer
;
; star_timer = STAR_TIMER_MAX;
;
	lda     #$0F
	sta     _star_timer
;
; invincible_state = FALSE;
;
	lda     #$00
	sta     _invincible_state
;
; if (lives == 1)
;
	lda     _lives
	cmp     #$01
	bne     L004B
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; life_timer = LIFE_TIMER_MAX;
;
	lda     #$1E
	sta     _life_timer
;
; half_dead_state = TRUE;
;
	lda     #$01
	sta     _half_dead_state
;
; if (game_level < 3)
;
L004B:	lda     _game_level
	cmp     #$03
	bcs     L0026
;
; pal_bg(palette_bg2);
;
	lda     #<(_palette_bg2)
	ldx     #>(_palette_bg2)
;
; else
;
	jmp     L0057
;
; pal_bg(palette_bg3);
;
L0026:	lda     #<(_palette_bg3)
	ldx     #>(_palette_bg3)
L0057:	jsr     _pal_bg
;
; pal_spr(palette_spr);
;
	lda     #<(_palette_spr)
	ldx     #>(_palette_spr)
	jsr     _pal_spr
;
; nes_load_title(level_clear_title, NAMETABLE_A);
;
	lda     #<(_level_clear_title)
	ldx     #>(_level_clear_title)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _nes_load_title
;
; NES_GOTOXY(0, 1);nes_text_hud("%c", 0x77);
;
	ldx     #$00
	txa
	sta     _xText
	sta     _xText+1
	lda     #$01
	sta     _yText
	stx     _yText+1
	lda     #<(S000E)
	ldx     #>(S000E)
	jsr     pushax
	lda     #$77
	jsr     pusha0
	ldy     #$04
	jsr     _nes_text_hud
;
; NES_GOTOXY(18, 13);nes_text_hud("%0.5d", score);
;
	ldx     #$00
	lda     #$12
	sta     _xText
	stx     _xText+1
	lda     #$0D
	sta     _yText
	stx     _yText+1
	lda     #<(S000F)
	ldx     #>(S000F)
	jsr     pushax
	lda     _score
	ldx     _score+1
	jsr     pushax
	ldy     #$04
	jsr     _nes_text_hud
;
; NES_GOTOXY(18, 15);nes_text_hud("%0.2d", lives);
;
	ldx     #$00
	lda     #$12
	sta     _xText
	stx     _xText+1
	lda     #$0F
	sta     _yText
	stx     _yText+1
	lda     #<(S0010)
	ldx     #>(S0010)
	jsr     pushax
	lda     _lives
	jsr     pusha0
	ldy     #$04
	jsr     _nes_text_hud
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; music_play(SONG_LEVEL_CLEAR);
;
	lda     #$04
	jsr     _music_play
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0028:	jsr     _ppu_wait_nmi
;
; nes_fade_transition_fg();
;
	jsr     _nes_fade_transition_fg
;
; if (NES_PAD1(PAD_START))
;
	lda     #$00
	jsr     _pad_poll
	and     #$10
	beq     L0028
;
; nes_fade_in();
;
	jsr     _nes_fade_in
;
; pal_spr(palette_spr);
;
	lda     #<(_palette_spr)
	ldx     #>(_palette_spr)
	jsr     _pal_spr
;
; nes_exit_cleanup();
;
	jsr     _nes_exit_cleanup
;
; game_level++;
;
	inc     _game_level
;
; coins = stars = score = 0;
;
	lda     #$00
	sta     _score
	sta     _score+1
	sta     _stars
	sta     _coins
;
; if (game_level <= 3)
;
	lda     _game_level
	cmp     #$04
	bcs     L002C
;
; init_player(0x2FD0, 0xC200, 12, 8, RIGHT);
;
	jsr     decsp6
	lda     #$D0
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$2F
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$C2
	sta     (sp),y
	lda     #$0C
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	tya
;
; else
;
	jmp     L0041
;
; init_player(-0x2FD0, 0xC200, 12, 8, LEFT);
;
L002C:	jsr     decsp6
	lda     #$30
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$D0
	sta     (sp),y
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$C2
	sta     (sp),y
	lda     #$0C
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$0B
L0041:	jsr     _init_player
;
; init_enemy();
;
	jsr     _init_enemy
;
; init_collectables();
;
	jsr     _init_collectables
;
; load_level();
;
	jsr     _load_level
;
; print_hud();
;
	jsr     _print_hud
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; nes_fade_in();
;
	jsr     _nes_fade_in
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; music_pause(FALSE);
;
	lda     #$00
	jsr     _music_pause
;
; if (playerRobo.state == STATE_DEAD || lives == 0 || life_timer == 0 || game_level > MAX_LEVELS)
;
L004C:	lda     _playerRobo+9
	beq     L004D
	lda     _lives
	beq     L004D
	lda     _life_timer
	beq     L004D
	lda     _game_level
	cmp     #$06
	jcc     L0055
;
; game_mode = MODE_GAME_OVER;
;
L004D:	lda     #$06
	sta     _game_mode
;
; sfx_play(SFX_DEAD, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; oam_clear();
;
	jsr     _oam_clear
;
; if (game_level < MAX_LEVELS)
;
	lda     _game_level
	cmp     #$05
	bcs     L0031
;
; oam_meta_spr(HIGH_BYTE(playerRobo.x), HIGH_BYTE(playerRobo.y), player_robo_spr_list[PLAYER_ANIM_DEAD]);
;
	jsr     decsp2
	lda     _playerRobo+1
	ldy     #$01
	sta     (sp),y
	lda     _playerRobo+3
	dey
	sta     (sp),y
	lda     _player_robo_spr_list+20
	ldx     _player_robo_spr_list+20+1
	jsr     _oam_meta_spr
;
; delay(50);
;
	lda     #$32
	jsr     _delay
;
; nes_clear_nametable(NAMETABLE_A);
;
L0031:	ldx     #$20
	lda     #$00
	jsr     _nes_clear_nametable
;
; nes_exit_cleanup();
;
	jsr     _nes_exit_cleanup
;
; nes_fade_out();
;
	jsr     _nes_fade_out
;
; nes_fade_in();
;
	jsr     _nes_fade_in
;
; pal_spr(palette_title);
;
	lda     #<(_palette_title)
	ldx     #>(_palette_title)
	jsr     _pal_spr
;
; nes_load_title(game_over_title, NAMETABLE_A);
;
	lda     #<(_game_over_title)
	ldx     #>(_game_over_title)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _nes_load_title
;
; NES_GOTOXY(0, 0);nes_text_hud("%c", 0x77);
;
	lda     #$00
	sta     _xText
	sta     _xText+1
	sta     _yText
	sta     _yText+1
	lda     #<(S0011)
	ldx     #>(S0011)
	jsr     pushax
	lda     #$77
	jsr     pusha0
	ldy     #$04
	jsr     _nes_text_hud
;
; NES_GOTOXY(18, 13);nes_text_hud("%0.5d", total_score);
;
	ldx     #$00
	lda     #$12
	sta     _xText
	stx     _xText+1
	lda     #$0D
	sta     _yText
	stx     _yText+1
	lda     #<(S0012)
	ldx     #>(S0012)
	jsr     pushax
	lda     _total_score
	ldx     _total_score+1
	jsr     pushax
	ldy     #$04
	jsr     _nes_text_hud
;
; NES_GOTOXY(18, 15);nes_text_hud("%0.2d", total_coins);
;
	ldx     #$00
	lda     #$12
	sta     _xText
	stx     _xText+1
	lda     #$0F
	sta     _yText
	stx     _yText+1
	lda     #<(S0013)
	ldx     #>(S0013)
	jsr     pushax
	lda     _total_coins
	jsr     pusha0
	ldy     #$04
	jsr     _nes_text_hud
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; music_play(SONG_LEVEL_CLEAR);
;
	lda     #$04
	jsr     _music_play
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; if (NES_PAD1(PAD_START))
;
L0055:	lda     #$00
	jsr     _pad_poll
	and     #$10
	beq     L004F
;
; music_pause(TRUE);
;
	lda     #$01
	jsr     _music_pause
;
; game_mode = MODE_PAUSE;
;
	lda     #$04
	sta     _game_mode
;
; sfx_play(SFX_PAUSE, 0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; color_emphasis(COL_EMP_DARK);
;
	lda     #$E0
	jsr     _color_emphasis
;
; NES_GOTOXY(9, 1);
;
	ldx     #$00
	lda     #$09
	sta     _xText
	stx     _xText+1
	lda     #$01
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("GAME PAUSED");
;
	lda     #<(S0014)
	ldx     #>(S0014)
	jsr     pushax
	ldy     #$02
	jsr     _nes_text_hud
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; while (game_mode == MODE_GAME)
;
L004F:	lda     _game_mode
	cmp     #$03
	jeq     L0015
;
; while (game_mode == MODE_PAUSE)
;
	jmp     L0050
;
; oam_clear();
;
L0033:	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; if (NES_PAD1(PAD_START))
;
	lda     #$00
	jsr     _pad_poll
	and     #$10
	beq     L0050
;
; sfx_play(SFX_PAUSE, 0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; game_mode = MODE_GAME;
;
	lda     #$03
	sta     _game_mode
;
; color_emphasis(COL_EMP_NORMAL);
;
	lda     #$00
	jsr     _color_emphasis
;
; music_pause(FALSE);
;
	lda     #$00
	jsr     _music_pause
;
; NES_GOTOXY(9, 1);
;
	ldx     #$00
	lda     #$09
	sta     _xText
	stx     _xText+1
	lda     #$01
	sta     _yText
	stx     _yText+1
;
; nes_text_hud("              ");
;
	lda     #<(S0015)
	ldx     #>(S0015)
	jsr     pushax
	ldy     #$02
	jsr     _nes_text_hud
;
; nes_hud_update();
;
	jsr     _nes_hud_update
;
; while (game_mode == MODE_PAUSE)
;
L0050:	lda     _game_mode
	cmp     #$04
	beq     L0033
;
; while (game_mode == MODE_GAME_OVER || game_mode == MODE_HELP)
;
	jmp     L0051
;
; ppu_wait_nmi();
;
L0037:	jsr     _ppu_wait_nmi
;
; nes_fade_transition_fg();
;
	jsr     _nes_fade_transition_fg
;
; if (NES_PAD1(PAD_START))
;
	lda     #$00
	jsr     _pad_poll
	and     #$10
	beq     L0051
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; reset_collectables();
;
	jsr     _reset_collectables
;
; oam_clear();
;
	jsr     _oam_clear
;
; nes_clear_nametable(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _nes_clear_nametable
;
; nes_exit_cleanup();
;
	jsr     _nes_exit_cleanup
;
; nes_fade_out();
;
	jsr     _nes_fade_out
;
; nes_fade_in();
;
	jsr     _nes_fade_in
;
; pal_bg(palette_title);
;
	lda     #<(_palette_title)
	ldx     #>(_palette_title)
	jsr     _pal_bg
;
; nes_load_title(game_title, NAMETABLE_A);
;
	lda     #<(_game_title)
	ldx     #>(_game_title)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _nes_load_title
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; music_play(SONG_TITLE);
;
	lda     #$00
	jsr     _music_play
;
; break;
;
	jmp     L0043
;
; while (game_mode == MODE_GAME_OVER || game_mode == MODE_HELP)
;
L0051:	lda     _game_mode
	cmp     #$06
	beq     L0037
	cmp     #$02
	beq     L0037
	jmp     L0043

.endproc

